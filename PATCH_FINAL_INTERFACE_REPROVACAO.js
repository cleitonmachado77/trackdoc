// ========================================
// PATCH FINAL PARA CORRE√á√ÉO COMPLETA DA INTERFACE DE REPROVA√á√ÉO
// ========================================
// Aplique estas corre√ß√µes no arquivo: app/components/process-details-modal.tsx

// 1. ADICIONAR ESTADOS PARA VALIDA√á√ÉO VISUAL (pr√≥ximo aos outros useState)
const [rejectCommentError, setRejectCommentError] = useState(false)
const [showRejectWarning, setShowRejectWarning] = useState(false)

// 2. FUN√á√ÉO handleReject CORRIGIDA - Substitua toda a fun√ß√£o existente
const handleReject = async () => {
  console.log('=== IN√çCIO handleReject ===')
  
  // Prevenir cliques duplos
  if (!preventDoubleClick() || isProcessingAction) {
    console.log('üö´ A√ß√£o bloqueada - duplo clique ou j√° processando')
    return
  }

  if (!currentExecution) {
    toast({
      title: "Erro",
      description: "Nenhuma execu√ß√£o pendente encontrada",
      variant: "destructive",
    })
    return
  }

  // ‚úÖ VALIDA√á√ÉO DE COMENT√ÅRIOS - Com aviso visual
  if (requiresComments('reject') && !actionComments.trim()) {
    console.log('‚ùå Coment√°rios obrigat√≥rios n√£o preenchidos')
    
    // Mostrar aviso vermelho abaixo do bot√£o
    setShowRejectWarning(true)
    setRejectCommentError(true)
    
    // Toast para feedback adicional
    toast({
      title: "Coment√°rios obrigat√≥rios", 
      description: "√â necess√°rio adicionar coment√°rios ao reprovar o processo",
      variant: "destructive",
      duration: 3000,
    })
    
    // Focar no campo de coment√°rios
    const commentsField = document.getElementById('action-comments')
    if (commentsField) {
      commentsField.focus()
      commentsField.scrollIntoView({ behavior: 'smooth' })
    }
    
    return
  }

  // Limpar avisos se coment√°rios est√£o ok
  setShowRejectWarning(false)
  setRejectCommentError(false)

  setIsProcessingAction(true)
  
  try {
    console.log('üì§ Executando reprova√ß√£o...')
    
    const result = await advanceStep(
      currentExecution.process_id,
      currentExecution.id,
      'reject',
      actionComments
    )

    console.log('‚úÖ Resultado da reprova√ß√£o:', result)

    // ‚úÖ FEEDBACK DE SUCESSO
    if (result?.executionId) {
      toast({
        title: "‚úÖ Processo reprovado",
        description: "O processo foi reprovado e retornado ao usu√°rio anterior.",
        duration: 3000,
      })
    } else {
      toast({
        title: "‚ö†Ô∏è Processo finalizado",
        description: "O processo foi reprovado e finalizado.",
      })
    }

    // ‚úÖ LIMPAR INTERFACE
    setActionComments("")
    setShowRejectWarning(false)
    setRejectCommentError(false)
    
    // ‚úÖ RECARREGAR DADOS PARA ATUALIZAR BOT√ïES
    await reloadProcessData()
    
    // ‚úÖ AGUARDAR PROCESSAMENTO PARA GARANTIR ATUALIZA√á√ÉO
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    console.log('‚úÖ Reprova√ß√£o conclu√≠da - interface atualizada')
    
  } catch (error) {
    console.error('‚ùå Erro ao reprovar processo:', error)
    
    toast({
      title: "Erro ao reprovar",
      description: "N√£o foi poss√≠vel reprovar o processo. Tente novamente.",
      variant: "destructive",
    })
  } finally {
    setIsProcessingAction(false)
    console.log('=== FIM handleReject ===')
  }
}

// 3. LIMPAR AVISO QUANDO COMENT√ÅRIOS FOREM ALTERADOS
// Adicione esta fun√ß√£o depois da fun√ß√£o handleReject
const handleCommentsChange = (e) => {
  const value = e.target.value
  setActionComments(value)
  
  // Limpar avisos quando usu√°rio come√ßar a digitar
  if (value.trim() && showRejectWarning) {
    setShowRejectWarning(false)
    setRejectCommentError(false)
  }
}

// 4. SUBSTITUIR O CAMPO DE COMENT√ÅRIOS - Localizar e substituir toda a div
<div>
  <Label htmlFor="action-comments" className="flex items-center gap-2">
    Coment√°rios 
    {requiresComments('reject') && (
      <Badge variant="destructive" className="text-xs px-2 py-1">
        Obrigat√≥rio para reprova√ß√£o
      </Badge>
    )}
    {!requiresComments('reject') && <span className="text-gray-500">(opcional)</span>}
  </Label>
  
  <Textarea
    id="action-comments"
    placeholder={
      requiresComments('reject') 
        ? "Explique o motivo da reprova√ß√£o..."
        : "Adicione coment√°rios sobre a a√ß√£o..."
    }
    value={actionComments}
    onChange={handleCommentsChange} // ‚úÖ USAR NOVA FUN√á√ÉO
    rows={3}
    className={`mt-1 transition-colors ${
      rejectCommentError 
        ? 'border-red-500 focus:border-red-600 bg-red-50' 
        : ''
    }`}
  />
  
  {/* ‚úÖ AVISO VERMELHO ABAIXO DO CAMPO */}
  {requiresComments('reject') && !actionComments.trim() && rejectCommentError && (
    <div className="mt-2 p-2 bg-red-50 border border-red-200 rounded text-sm text-red-700 flex items-center gap-2">
      <AlertTriangle className="h-4 w-4" />
      √â necess√°rio inserir coment√°rios para reprovar este processo
    </div>
  )}
  
  {/* Indicador positivo quando coment√°rios preenchidos */}
  {actionComments.trim() && requiresComments('reject') && (
    <p className="text-sm text-green-600 mt-1 flex items-center gap-1">
      <CheckCircle className="h-4 w-4" />
      Coment√°rios preenchidos ‚úì
    </p>
  )}
</div>

// 5. ADICIONAR AVISO VERMELHO ABAIXO DOS BOT√ïES
// Localizar a div que cont√©m os bot√µes e adicionar ap√≥s ela:

{/* ‚úÖ AVISO VERMELHO ABAIXO DOS BOT√ïES */}
{showRejectWarning && (
  <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
    <div className="flex items-center gap-2 text-red-700">
      <AlertTriangle className="h-5 w-5" />
      <span className="font-medium">Coment√°rios obrigat√≥rios</span>
    </div>
    <p className="text-sm text-red-600 mt-1">
      √â necess√°rio inserir coment√°rios no campo acima para reprovar este processo.
    </p>
  </div>
)}

// 6. MELHORAR A FUN√á√ÉO getAvailableActions (opcional, para garantir que bot√µes sumam)
// Localizar a fun√ß√£o getAvailableActions e verificar se ela est√° considerando o status correto
// Se necess√°rio, pode adicionar esta verifica√ß√£o adicional:

const getAvailableActions = () => {
  if (!currentExecution?.step || !currentProcess) return []
  
  // ‚úÖ Se a execu√ß√£o atual est√° completed, n√£o mostrar a√ß√µes
  if (currentExecution?.status === 'completed') {
    console.log('Execu√ß√£o atual conclu√≠da - n√£o h√° a√ß√µes dispon√≠veis')
    return []
  }
  
  const currentStep = currentExecution.step
  const actions = []
  
  // Resto da fun√ß√£o permanece igual...
  // ... c√≥digo existente ...
}

// ========================================
// IMPORTS NECESS√ÅRIOS - Adicionar no topo do arquivo se n√£o existirem
// ========================================
import { AlertTriangle, CheckCircle, XCircle, ArrowRight, Signature } from "lucide-react"
import { Badge } from "@/components/ui/badge"

// ========================================
// RESUMO DAS ALTERA√á√ïES
// ========================================
/*
‚úÖ Estados adicionados: rejectCommentError, showRejectWarning
‚úÖ handleReject corrigido: valida√ß√£o visual + limpeza de interface
‚úÖ handleCommentsChange: limpa avisos quando usu√°rio digita
‚úÖ Campo de coment√°rios: visual melhorado com valida√ß√£o
‚úÖ Aviso vermelho: aparece abaixo dos bot√µes quando necess√°rio
‚úÖ getAvailableActions: verifica status completed para ocultar bot√µes
*/

