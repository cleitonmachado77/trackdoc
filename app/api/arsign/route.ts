import { NextRequest, NextResponse } from 'next/server'
import { createServerClient } from '@supabase/ssr'
import { createClient } from '@supabase/supabase-js'
import { cookies } from 'next/headers'
import { supabaseConfig } from '@/lib/supabase/config'
import { digitalSignatureService, SignatureData } from '@/lib/digital-signature'

export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Iniciando requisi√ß√£o POST para /api/arsign (Sistema Simplificado)')
    console.log('üìÖ Timestamp:', new Date().toISOString())
    
    const cookieStore = cookies()
    const supabase = createServerClient(supabaseConfig.url, supabaseConfig.anonKey, {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          cookieStore.set({ name, value, ...options })
        },
        remove(name: string, options: any) {
          cookieStore.set({ name, value: '', ...options })
        },
      },
    })

    // Verificar autentica√ß√£o do usu√°rio
    console.log('üîê Verificando autentica√ß√£o...')
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      console.error('‚ùå Erro de autentica√ß√£o:', authError)
      return NextResponse.json(
        { error: 'Usu√°rio n√£o autenticado' },
        { status: 401 }
      )
    }
    console.log('‚úÖ Usu√°rio autenticado:', user.id)

    console.log('üìã Processando FormData...')
    const formData = await request.formData()
    
    // Log de todos os campos recebidos (sem usar instanceof File)
    const allFields = Array.from(formData.entries())
    console.log('üìã Todos os campos recebidos:', allFields.map(([key, value]) => ({
      key,
      type: typeof value,
      hasValue: !!value,
      valueLength: typeof value === 'object' && 'size' in value ? (value as any).size : String(value).length
    })))

    const action = formData.get('action') as 'upload' | 'existing' | 'multi_signature'
    const documentId = formData.get('documentId') as string || formData.get('document_id') as string
    const file = formData.get('file') as any // Usar 'any' para evitar problemas com File
    const signatureTemplateStr = formData.get('signature_template') as string

    const usersStr = formData.get('users') as string
    const selectedDocumentsStr = formData.get('selected_documents') as string // ‚úÖ NOVO: Documentos selecionados

    // Processar template de assinatura personalizado
    let signatureTemplate = null
    if (signatureTemplateStr) {
      try {
        signatureTemplate = JSON.parse(signatureTemplateStr)
        console.log('üé® Template personalizado recebido:', {
          title: signatureTemplate.title,
          position: signatureTemplate.position,
          hasCustomColors: !!(signatureTemplate.background_color && signatureTemplate.border_color)
        })
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao processar template personalizado:', error)
        signatureTemplate = null
      }
    }

    // Processar usu√°rios para assinatura m√∫ltipla
    let multiSignatureUsers = []
    if (usersStr && action === 'multi_signature') {
      try {
        multiSignatureUsers = JSON.parse(usersStr)
        console.log('üë• Usu√°rios para assinatura m√∫ltipla:', multiSignatureUsers.length, 'usu√°rios')
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao processar usu√°rios para assinatura m√∫ltipla:', error)
        return NextResponse.json(
          { error: 'Erro ao processar lista de usu√°rios' },
          { status: 400 }
        )
      }
    }

    // ‚úÖ NOVO: Processar documentos selecionados
    let selectedDocuments = []
    if (selectedDocumentsStr) {
      try {
        selectedDocuments = JSON.parse(selectedDocumentsStr)
        console.log('üìÑ Documentos selecionados para assinatura:', selectedDocuments.length)
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao processar documentos selecionados:', error)
        selectedDocuments = []
      }
    }

    console.log('üìã Dados extra√≠dos:', { 
      action, 
      documentId, 
      hasFile: !!file,
      fileName: file?.name,
      hasCustomTemplate: !!signatureTemplate,

    })

    let pdfBuffer: Buffer
    let documentName = 'Documento'

    if (action === 'upload') {
      // Upload de novo arquivo
      if (!file) {
        console.error('‚ùå Nenhum arquivo fornecido')
        return NextResponse.json(
          { error: 'Nenhum arquivo fornecido' },
          { status: 400 }
        )
      }

      if (!file.name.toLowerCase().endsWith('.pdf')) {
        console.error('‚ùå Arquivo n√£o √© PDF:', file.name)
        return NextResponse.json(
          { error: 'Apenas arquivos PDF s√£o aceitos' },
          { status: 400 }
        )
      }

      console.log('üìÑ Processando arquivo PDF:', file.name, 'Tamanho:', file.size)
      pdfBuffer = Buffer.from(await file.arrayBuffer())
      documentName = file.name
      console.log('‚úÖ Arquivo processado, tamanho do buffer:', pdfBuffer.length)
      
    } else if (action === 'existing') {
      // Usar documento existente
      if (!documentId) {
        console.error('‚ùå ID do documento n√£o fornecido')
        return NextResponse.json(
          { error: 'ID do documento n√£o fornecido' },
          { status: 400 }
        )
      }

      console.log('üîç Buscando documento:', documentId)
      // Buscar documento no Supabase
      const { data: document, error: docError } = await supabase
        .from('documents')
        .select('*')
        .eq('id', documentId)
        .single()

      if (docError || !document) {
        console.error('‚ùå Documento n√£o encontrado:', docError)
        console.error('üîç ID do documento buscado:', documentId)
        console.error('üîç Usu√°rio atual:', user.id)
        return NextResponse.json(
          { error: 'Documento n√£o encontrado' },
          { status: 404 }
        )
      }

      console.log('üìÑ Documento encontrado:', document.title)
      console.log('üìÑ Detalhes do documento:', {
        id: document.id,
        title: document.title,
        entity_id: document.entity_id,
        file_path: document.file_path,
        created_at: document.created_at
      })
      documentName = document.title

      // Verificar se o usu√°rio tem acesso ao documento
      // Buscar o perfil do usu√°rio para obter o entity_id
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('entity_id')
        .eq('id', user.id)
        .single()

      if (profileError) {
        console.error('‚ùå Erro ao buscar perfil do usu√°rio:', profileError)
        return NextResponse.json(
          { error: 'Erro ao verificar perfil do usu√°rio' },
          { status: 500 }
        )
      }

      // Verificar acesso ao documento
      let hasAccess = false
      let accessReason = ''

      // Op√ß√£o 1: Usu√°rio √© o autor do documento
      if (document.author_id === user.id) {
        hasAccess = true
        accessReason = 'Usu√°rio √© o autor do documento'
        console.log('‚úÖ Acesso permitido:', accessReason)
      }
      // Op√ß√£o 2: Documento tem entity_id e usu√°rio pertence √† mesma entidade
      else if (document.entity_id && profile?.entity_id && document.entity_id === profile.entity_id) {
        hasAccess = true
        accessReason = 'Usu√°rio pertence √† mesma entidade do documento'
        console.log('‚úÖ Acesso permitido:', accessReason)
      }
      // Op√ß√£o 3: Documento n√£o tem entity_id mas usu√°rio tem perfil v√°lido
      else if (!document.entity_id && profile) {
        hasAccess = true
        accessReason = 'Documento sem entidade, usu√°rio com perfil v√°lido'
        console.log('‚úÖ Acesso permitido:', accessReason)
      }

      if (!hasAccess) {
        console.error('‚ùå Acesso negado ao documento')
        console.error('üîç Documento entity_id:', document.entity_id)
        console.error('üîç Documento author_id:', document.author_id)
        console.error('üîç Usu√°rio atual:', user.id)
        console.error('üîç Usu√°rio entity_id:', profile?.entity_id)
        return NextResponse.json(
          { error: 'Acesso negado ao documento' },
          { status: 403 }
        )
      }

      console.log('üîê Verifica√ß√£o de acesso conclu√≠da:', accessReason)

      console.log('üîç Buscando arquivo no storage:', document.file_path)
      // Buscar arquivo do storage
      const { data: fileData, error: fileError } = await supabase.storage
        .from('documents')
        .download(document.file_path)

      if (fileError || !fileData) {
        console.error('‚ùå Erro ao carregar arquivo:', fileError)
        return NextResponse.json(
          { error: 'Erro ao carregar arquivo do documento' },
          { status: 500 }
        )
      }

      pdfBuffer = Buffer.from(await fileData.arrayBuffer())
      console.log('‚úÖ Arquivo do storage carregado, tamanho:', pdfBuffer.length)
      

    } else if (action === 'multi_signature') {
      // Assinatura m√∫ltipla
      if (multiSignatureUsers.length === 0) {
        console.error('‚ùå Nenhum usu√°rio fornecido para assinatura m√∫ltipla')
        return NextResponse.json(
          { error: 'Nenhum usu√°rio fornecido para assinatura m√∫ltipla' },
          { status: 400 }
        )
      }

      if (file) {
        // Upload de novo arquivo
        if (!file.name.toLowerCase().endsWith('.pdf')) {
          console.error('‚ùå Arquivo n√£o √© PDF:', file.name)
          return NextResponse.json(
            { error: 'Apenas arquivos PDF s√£o aceitos' },
            { status: 400 }
          )
        }

        console.log('üìÑ Processando arquivo PDF para assinatura m√∫ltipla:', file.name, 'Tamanho:', file.size)
        pdfBuffer = Buffer.from(await file.arrayBuffer())
        documentName = file.name
        console.log('‚úÖ Arquivo processado, tamanho do buffer:', pdfBuffer.length)
        
      } else if (documentId) {
        // Usar documento existente
        console.log('üîç Buscando documento para assinatura m√∫ltipla:', documentId)
        const { data: document, error: docError } = await supabase
          .from('documents')
          .select('*')
          .eq('id', documentId)
          .single()

        if (docError || !document) {
          console.error('‚ùå Documento n√£o encontrado:', docError)
          return NextResponse.json(
            { error: 'Documento n√£o encontrado' },
            { status: 404 }
          )
        }

        console.log('üìÑ Documento encontrado para assinatura m√∫ltipla:', document.title)
        documentName = document.title

        // Buscar arquivo do storage
        const { data: fileData, error: fileError } = await supabase.storage
          .from('documents')
          .download(document.file_path)

        if (fileError || !fileData) {
          console.error('‚ùå Erro ao carregar arquivo:', fileError)
          return NextResponse.json(
            { error: 'Erro ao carregar arquivo do documento' },
            { status: 500 }
          )
        }

        pdfBuffer = Buffer.from(await fileData.arrayBuffer())
        console.log('‚úÖ Arquivo carregado para assinatura m√∫ltipla, tamanho:', pdfBuffer.length)
        
      } else {
        console.error('‚ùå Nenhum arquivo ou documento fornecido para assinatura m√∫ltipla')
        return NextResponse.json(
          { error: 'Nenhum arquivo ou documento fornecido' },
          { status: 400 }
        )
      }
      
    } else {
      console.error('‚ùå A√ß√£o inv√°lida:', action)
      return NextResponse.json(
        { error: 'A√ß√£o inv√°lida' },
        { status: 400 }
      )
    }

    // Validar PDF
    console.log('üîç Validando PDF...')
    const isValidPdf = await digitalSignatureService.validatePdf(pdfBuffer)
    if (!isValidPdf) {
      console.error('‚ùå PDF inv√°lido')
      return NextResponse.json(
        { error: 'Arquivo PDF inv√°lido' },
        { status: 400 }
      )
    }
    console.log('‚úÖ PDF v√°lido')

    // Extrair metadados do PDF
    console.log('üìä Extraindo metadados do PDF...')
    const metadata = await digitalSignatureService.extractPdfMetadata(pdfBuffer)
    console.log('‚úÖ Metadados extra√≠dos:', metadata)

    // Obter informa√ß√µes do usu√°rio
    const userName = user.user_metadata?.full_name || user.email?.split('@')[0] || 'Usu√°rio'
    const userEmail = user.email || 'sem-email@exemplo.com'

    console.log('üë§ Informa√ß√µes do usu√°rio:', { userName, userEmail })

    // Criar assinatura digital
    console.log('‚úçÔ∏è Criando assinatura digital...')
    // Gerar UUID v√°lido se n√£o tiver documentId
    const finalDocumentId = documentId || crypto.randomUUID()
    
    console.log('üìä Dados para assinatura:', {
      pdfBufferSize: pdfBuffer.length,
      userId: user.id,
      userName,
      userEmail,
      documentId: finalDocumentId
    })
    
    // Verificar inst√¢ncia do servi√ßo
    console.log('üîß Verificando inst√¢ncia do servi√ßo de assinatura...')
    console.log('üìã Servi√ßo dispon√≠vel:', !!digitalSignatureService)
    console.log('üìã M√©todos dispon√≠veis:', Object.getOwnPropertyNames(Object.getPrototypeOf(digitalSignatureService)))
    
    try {
      let signedPdf: Buffer
      let signature: any
      let allSignatures: any[] = []

      if (action === 'multi_signature') {
        // Assinatura m√∫ltipla - criar processo de aprova√ß√£o
        console.log('üë• Criando processo de assinatura m√∫ltipla para', multiSignatureUsers.length, 'usu√°rios')
        
        // Criar processo de aprova√ß√£o
          console.log('üìã [MULTI_SIGNATURE] Criando processo de aprova√ß√£o')
          
          // Verificar se a service role key est√° configurada
          if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
            console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o configurada')
            return NextResponse.json(
              { error: 'Configura√ß√£o de storage incompleta' },
              { status: 500 }
            )
          }
          
          // Criar cliente com service role key para opera√ß√µes de storage
          const serviceRoleSupabase = createClient(
            supabaseConfig.url,
            process.env.SUPABASE_SERVICE_ROLE_KEY
          )

        // Salvar o arquivo original no storage primeiro
        const filePath = `temp_${Date.now()}_${documentName}`
        const { error: uploadError } = await serviceRoleSupabase.storage
          .from('documents')
          .upload(filePath, pdfBuffer, {
            contentType: 'application/pdf',
            upsert: false
          })

        if (uploadError) {
          console.error('‚ùå Erro ao fazer upload do arquivo original:', uploadError)
          throw new Error('Erro ao salvar arquivo original')
        }

        // Verificar se as tabelas existem
        console.log('üîç Verificando se as tabelas existem...')
        
        try {
          // Tentar fazer uma consulta simples para verificar se a tabela existe
          const { error: testError } = await supabase
            .from('multi_signature_requests')
            .select('id')
            .limit(1)
          
          if (testError && testError.code === '42P01') {
            console.error('‚ùå Tabela multi_signature_requests n√£o existe')
            return NextResponse.json({
              success: false,
              error: 'Tabelas de assinatura m√∫ltipla n√£o foram criadas',
              message: 'Execute o SQL no Supabase Dashboard para criar as tabelas necess√°rias',
              sqlFile: 'create-multi-signature-tables.sql'
            }, { status: 400 })
          } else if (testError) {
            console.error('‚ùå Erro ao verificar tabelas:', testError)
            return NextResponse.json({
              success: false,
              error: 'Erro ao verificar tabelas',
              details: testError
            }, { status: 500 })
          } else {
            console.log('‚úÖ Tabelas existem')
          }
        } catch (error) {
          console.error('‚ùå Erro ao verificar tabelas:', error)
          return NextResponse.json({
            success: false,
            error: 'Erro ao verificar tabelas',
            details: error
          }, { status: 500 })
        }

        // Criar solicita√ß√£o de assinatura m√∫ltipla no banco usando service role
        const { data: multiSignatureRequest, error: requestError } = await serviceRoleSupabase
          .from('multi_signature_requests')
          .insert({
            document_id: finalDocumentId,
            document_name: documentName,
            document_path: filePath,
            requester_id: user.id,
            signature_template: signatureTemplate,
            status: 'pending',
            total_signatures: multiSignatureUsers.length,
            completed_signatures: 0,
            metadata: {
              original_file_size: pdfBuffer.length,
              signature_template: signatureTemplate
            }
          })
          .select()
          .single()

        if (requestError) {
          console.error('Erro ao criar solicita√ß√£o de assinatura m√∫ltipla:', requestError)
          throw new Error('Erro ao criar solicita√ß√£o de assinatura m√∫ltipla')
        }

        // Criar aprova√ß√µes individuais para cada usu√°rio usando service role
        const approvals = multiSignatureUsers.map((signatureUser: any) => ({
          request_id: multiSignatureRequest.id,
          user_id: signatureUser.id,
          user_name: signatureUser.full_name,
          user_email: signatureUser.email,
          status: 'pending'
        }))

        const { error: approvalsError } = await serviceRoleSupabase
          .from('multi_signature_approvals')
          .insert(approvals)

        if (approvalsError) {
          console.error('Erro ao criar aprova√ß√µes individuais:', approvalsError)
          throw new Error('Erro ao criar aprova√ß√µes individuais')
        }

        // Criar notifica√ß√µes para cada usu√°rio
        const notifications = multiSignatureUsers.map((signatureUser: any) => ({
          title: 'Documento para Assinatura',
          message: `Voc√™ foi selecionado para assinar o documento "${documentName}". Acesse o sistema para confirmar sua assinatura.`,
          type: 'info',
          priority: 'high',
          recipients: [signatureUser.email],
          channels: ['email', 'in_app'],
          status: 'pending',
          created_by: user.id
        }))

        const { error: notificationError } = await supabase
          .from('notifications')
          .insert(notifications)

        if (notificationError) {
          console.warn('‚ö†Ô∏è Erro ao criar notifica√ß√µes:', notificationError)
        } else {
          console.log('‚úÖ Notifica√ß√µes criadas para', multiSignatureUsers.length, 'usu√°rios')
        }

        // Retornar dados da solicita√ß√£o criada (sem assinar o documento ainda)
        return NextResponse.json({
          success: true,
          message: 'Processo de assinatura m√∫ltipla criado com sucesso',
          data: {
            requestId: multiSignatureRequest.id,
            documentName: documentName,
            totalSignatures: multiSignatureUsers.length,
            pendingSignatures: multiSignatureUsers.length,
            status: 'pending',
            users: multiSignatureUsers.map(u => ({
              id: u.id,
              name: u.full_name,
              email: u.email,
              status: 'pending'
            }))
          }
        })
      } else {
        // Assinatura √∫nica
        const result = await digitalSignatureService.createSignature(
          pdfBuffer,
          user.id,
          userName,
          userEmail,
          finalDocumentId,
          signatureTemplate
        )
        signedPdf = result.signedPdf
        signature = result.signature
        allSignatures = [signature]

        console.log('‚úÖ Assinatura criada:', signature.id)
        console.log('üîê Carimbo de tempo digital:', signature.digitalTimestamp)
        console.log('üìä Dados da assinatura:', {
          id: signature.id,
          userId: signature.userId,
          documentId: signature.documentId,
          userName: signature.userName,
          userEmail: signature.userEmail,
          timestamp: signature.timestamp,
          hash: signature.hash,
          digitalTimestamp: signature.digitalTimestamp,
          verificationCode: signature.verificationCode,
          documentHash: signature.documentHash,
          signatureHash: signature.signatureHash
        })
      }

      // Salvar PDF assinado no storage
      console.log('üíæ Salvando PDF assinado...')
      
      // Verificar se o bucket existe e est√° acess√≠vel usando service role key
      console.log('üîç Verificando bucket de storage...')
      
      // Verificar se a service role key est√° configurada
      if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
        console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY n√£o configurada')
        return NextResponse.json(
          { error: 'Configura√ß√£o de storage incompleta' },
          { status: 500 }
        )
      }
      
      // Criar cliente com service role key para opera√ß√µes de storage
      const serviceRoleSupabase = createClient(
        supabaseConfig.url,
        process.env.SUPABASE_SERVICE_ROLE_KEY
      )
      
      console.log('üîë Usando Service Role Key para opera√ß√µes de storage')
      
      const { data: bucketList, error: bucketError } = await serviceRoleSupabase.storage.listBuckets()
      if (bucketError) {
        console.error('‚ùå Erro ao listar buckets:', bucketError)
        return NextResponse.json(
          { error: 'Erro ao acessar storage: ' + bucketError.message },
          { status: 500 }
        )
      }
      
      const documentsBucket = bucketList.find(bucket => bucket.name === 'documents')
      if (!documentsBucket) {
        console.error('‚ùå Bucket "documents" n√£o encontrado')
        console.log('üìã Buckets dispon√≠veis:', bucketList.map(b => b.name))
        return NextResponse.json(
          { error: 'Bucket de documentos n√£o encontrado' },
          { status: 500 }
        )
      }
      
      console.log('‚úÖ Bucket "documents" encontrado:', documentsBucket.name)
      console.log('üìã Status do bucket:', {
        id: documentsBucket.id,
        name: documentsBucket.name,
        public: documentsBucket.public,
        createdAt: documentsBucket.created_at
      })
      
      // Verificar pol√≠ticas RLS do bucket
      console.log('üîê Verificando pol√≠ticas RLS do bucket...')
      try {
        const { data: policies, error: policiesError } = await serviceRoleSupabase
          .from('storage.policies')
          .select('*')
          .eq('bucket_id', documentsBucket.id)
        
        if (policiesError) {
          console.warn('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS:', policiesError.message)
        } else {
          console.log('üìã Pol√≠ticas RLS encontradas:', policies?.length || 0)
          if (policies && policies.length > 0) {
            policies.forEach((policy, index) => {
              console.log(`  ${index + 1}. ${policy.name}: ${policy.definition}`)
            })
          }
        }
      } catch (policiesException) {
        console.warn('‚ö†Ô∏è Exce√ß√£o ao verificar pol√≠ticas RLS:', policiesException)
      }
      
      // Sanitizar nome do arquivo para evitar problemas no storage
      const sanitizedDocumentName = documentName
        .replace(/[^a-zA-Z0-9.-]/g, '_') // Substituir caracteres especiais por underscore
        .replace(/_{2,}/g, '_') // Remover underscores duplicados
        .replace(/^_|_$/g, '') // Remover underscores no in√≠cio e fim
        .substring(0, 50) // Limitar tamanho do nome
      
      const signedFileName = `signed_${Date.now()}_${sanitizedDocumentName}.pdf`
      console.log('üìù Nome do arquivo sanitizado:', signedFileName)
      
      // Testar upload com nome simples primeiro para debug
      const testFileName = `test_${Date.now()}.pdf`
      console.log('üß™ Testando upload com nome simples:', testFileName)
      
      try {
        const { data: testUpload, error: testError } = await serviceRoleSupabase.storage
          .from('documents')
          .upload(testFileName, signedPdf, {
            contentType: 'application/pdf',
            cacheControl: '3600'
          })
        
        if (testError) {
          console.error('‚ùå Erro no teste de upload:', testError)
          console.error('üìù Detalhes do erro de teste:', {
            message: testError.message,
            name: testError.name
          })
        } else {
          console.log('‚úÖ Teste de upload bem-sucedido:', testFileName)
          // Remover arquivo de teste
          await serviceRoleSupabase.storage.from('documents').remove([testFileName])
          console.log('üóëÔ∏è Arquivo de teste removido')
        }
      } catch (testException) {
        console.error('‚ùå Exce√ß√£o no teste de upload:', testException)
      }
      
      // Tentar upload do arquivo real
      console.log('üì§ Iniciando upload do arquivo real:', signedFileName)
      console.log('üìä Detalhes do arquivo:', {
        fileName: signedFileName,
        fileSize: signedPdf.length,
        bufferType: typeof signedPdf,
        isBuffer: Buffer.isBuffer(signedPdf),
        contentType: 'application/pdf'
      })
      
      const { data: uploadData, error: uploadError } = await serviceRoleSupabase.storage
        .from('documents')
        .upload(signedFileName, signedPdf, {
          contentType: 'application/pdf',
          cacheControl: '3600'
        })

      if (uploadError) {
        console.error('‚ùå Erro ao salvar PDF assinado:', uploadError)
        console.error('üìù Detalhes do erro:', {
          message: uploadError.message,
          name: uploadError.name,
          fileName: signedFileName,
          fileSize: signedPdf.length
        })
        return NextResponse.json(
          { error: `Erro ao salvar documento assinado: ${uploadError.message}` },
          { status: 500 }
        )
      }

      console.log('‚úÖ PDF assinado salvo:', signedFileName)

             // Registrar a opera√ß√£o de assinatura no banco
       console.log('üíæ Salvando dados da assinatura...')
       try {
         // Extrair t√≠tulo do nome do arquivo
         const extractTitle = (fileName: string) => {
           if (!fileName) return null
           
           // Remove o path e a extens√£o .pdf
           const nameWithoutPath = fileName.replace(/^.*\//, '') // Remove path
           const nameWithoutExtension = nameWithoutPath.replace(/\.pdf$/i, '') // Remove .pdf
           
           // Se ainda tem .pdf no meio (como signed_xxx.pdf.pdf), remove novamente
           const cleanName = nameWithoutExtension.replace(/\.pdf$/i, '')
           
           return cleanName || null
         }
         
         const documentTitle = extractTitle(signedFileName)
         console.log('üìù T√≠tulo extra√≠do:', documentTitle, 'do arquivo:', signedFileName)

         const { error: insertError } = await supabase.from('document_signatures').insert({
           user_id: user.id,
           document_id: documentId || null,
           arqsign_document_id: signature.id,
           status: 'completed',
           signature_url: signedFileName,
           title: documentTitle, // ‚úÖ NOVO CAMPO
           verification_code: signature.verificationCode,
           verification_url: `${process.env.NEXT_PUBLIC_APP_URL || 'https://www.trackdoc.app.br'}/verify/${signature.verificationCode}`,
           qr_code_data: JSON.stringify({
             code: signature.verificationCode,
             url: `${process.env.NEXT_PUBLIC_APP_URL || 'https://www.trackdoc.app.br'}/verify/${signature.verificationCode}`,
             documentId: signature.documentId,
             timestamp: signature.digitalTimestamp
           }),
           document_hash: signature.documentHash,
           signature_hash: signature.hash
         })

        if (insertError) {
          console.warn('‚ö†Ô∏è Erro ao salvar no banco:', insertError)
        } else {
          console.log('‚úÖ Dados salvos no banco com sucesso')
        }
      } catch (dbError) {
        console.warn('‚ö†Ô∏è Erro ao salvar no banco:', dbError)
      }

      // Salvar documento assinado
      if (false) { // Removido: workflow n√£o √© mais usado
        console.log('üîÑ Substituindo documento original pelo assinado...')
        try {
          // Primeiro, buscar o documento original para obter os metadados
          const { data: originalDocument, error: fetchError } = await supabase
            .from('documents')
            .select('*')
            .eq('id', documentId)
            .single()

          if (fetchError) {
            console.warn('‚ö†Ô∏è Erro ao buscar documento original:', fetchError)
          } else {
            // Atualizar o documento original com o novo arquivo assinado
            const { error: updateError } = await supabase
              .from('documents')
              .update({
                file_path: signedFileName,
                updated_at: new Date().toISOString(),
                metadata: JSON.stringify({
                  ...JSON.parse((originalDocument as any)?.metadata || '{}'),
                  signed_version: true,
                  original_file_path: (originalDocument as any)?.file_path,
                  signed_at: new Date().toISOString(),
                  signed_by: user.id,
                })
              })
              .eq('id', documentId)

            if (updateError) {
              console.warn('‚ö†Ô∏è Erro ao atualizar documento original:', updateError)
            } else {
              console.log('‚úÖ Documento original substitu√≠do com sucesso')
              
              // Remover arquivo original do storage (opcional)
              if (originalDocument?.file_path && originalDocument.file_path !== signedFileName) {
                try {
                  await serviceRoleSupabase.storage
                    .from('documents')
                    .remove([originalDocument.file_path])
                  console.log('üóëÔ∏è Arquivo original removido do storage')
                } catch (removeError) {
                  console.warn('‚ö†Ô∏è Erro ao remover arquivo original:', removeError)
                }
              }
            }
          }
        } catch (replaceError) {
          console.warn('‚ö†Ô∏è Erro ao substituir documento:', replaceError)
        }
      }

      // ‚úÖ NOVO: Processar m√∫ltiplos documentos se selecionados
      let processedDocuments = []
      if (selectedDocuments.length > 0) {
        console.log('üìÑ Processando m√∫ltiplos documentos selecionados...')
        
        for (const docId of selectedDocuments) {
          try {
            // Buscar documento
            const { data: doc, error: docError } = await supabase
              .from('documents')
              .select('*')
              .eq('id', docId)
              .single()

            if (docError || !doc) {
              console.warn(`‚ö†Ô∏è Documento ${docId} n√£o encontrado:`, docError)
              continue
            }

            // Baixar arquivo do documento
            const { data: fileData, error: fileError } = await serviceRoleSupabase.storage
              .from('documents')
              .download(doc.file_path)

            if (fileError) {
              console.warn(`‚ö†Ô∏è Erro ao baixar documento ${docId}:`, fileError)
              continue
            }

            const docPdfBuffer = Buffer.from(await fileData.arrayBuffer())

            // Criar assinatura para este documento
            let docSignedPdf: Buffer
            let docSignature: any

            // Fun√ß√£o para extrair t√≠tulo do nome do arquivo
            const extractTitle = (fileName: string) => {
              if (!fileName) return null
              
              // Remove o path e a extens√£o .pdf
              const nameWithoutPath = fileName.replace(/^.*\//, '') // Remove path
              const nameWithoutExtension = nameWithoutPath.replace(/\.pdf$/i, '') // Remove .pdf
              
              // Se ainda tem .pdf no meio (como signed_xxx.pdf.pdf), remove novamente
              const cleanName = nameWithoutExtension.replace(/\.pdf$/i, '')
              
              return cleanName || null
            }

            // Gerar nome do arquivo assinado
            const docSignedFileName = `signed_${Date.now()}_${doc.title.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`

            const isMultiSignature = (action as string) === 'multi_signature'
            if (isMultiSignature) {
              const { signedPdf, signatures } = await digitalSignatureService.createMultiSignature(
                docPdfBuffer,
                multiSignatureUsers,
                docId,
                signatureTemplate
              )
              docSignedPdf = signedPdf
              docSignature = signatures

              // As assinaturas individuais ser√£o salvas apenas quando a assinatura m√∫ltipla for finalizada
              console.log('‚úÖ Assinatura m√∫ltipla criada, aguardando aprova√ß√µes para finaliza√ß√£o')
            } else {
              const { signedPdf, signature } = await digitalSignatureService.createSignature(
                docPdfBuffer,
                user.id,
                user.user_metadata?.full_name || 'Usu√°rio',
                user.email || '',
                docId,
                signatureTemplate
              )
              docSignedPdf = signedPdf
              docSignature = signature
            }

            // Salvar documento assinado
            const { error: docUploadError } = await serviceRoleSupabase.storage
              .from('documents')
              .upload(docSignedFileName, docSignedPdf, {
                contentType: 'application/pdf',
                upsert: false
              })

            if (docUploadError) {
              console.warn(`‚ö†Ô∏è Erro ao fazer upload do documento assinado ${docId}:`, docUploadError)
              continue
            }

            // Substituir documento original
            const { error: docUpdateError } = await supabase
              .from('documents')
              .update({
                file_path: docSignedFileName,
                updated_at: new Date().toISOString(),
                metadata: JSON.stringify({
                  ...JSON.parse(doc.metadata || '{}'),
                  signed_version: true,
                  original_file_path: doc.file_path,
                  signed_at: new Date().toISOString(),
                  signed_by: user.id,
                })
              })
              .eq('id', docId)

            if (docUpdateError) {
              console.warn(`‚ö†Ô∏è Erro ao atualizar documento ${docId}:`, docUpdateError)
            } else {
              console.log(`‚úÖ Documento ${docId} assinado e substitu√≠do com sucesso`)
              
              processedDocuments.push({
                documentId: docId,
                documentName: doc.title,
                signedFileName: docSignedFileName,
                downloadUrl: `${supabaseConfig.url}/storage/v1/object/public/documents/${docSignedFileName}`,
                signature: docSignature
              })
            }

          } catch (error) {
            console.error(`‚ùå Erro ao processar documento ${docId}:`, error)
          }
        }
      }

      // Retornar dados da assinatura
      const downloadUrl = `${supabaseConfig.url}/storage/v1/object/public/documents/${signedFileName}`
      
      console.log('üîó URL de download:', downloadUrl)
      console.log('‚úÖ Processo conclu√≠do com sucesso!')



      const responseData = {
        signatureId: signature.id,
        documentName: signedFileName,
        downloadUrl: downloadUrl,
        signature: signature,
        metadata: metadata,
        digitalTimestamp: signature.digitalTimestamp,
        userName: signature.userName,
        userEmail: signature.userEmail,
        replacedOriginal: false,
        processedDocuments: processedDocuments // ‚úÖ NOVO: Documentos processados
      }


      return NextResponse.json({
        success: true,
        data: responseData,
        message: (action as string) === 'multi_signature'
          ? `Documento enviado para assinatura de ${multiSignatureUsers.length} usu√°rio(s)!`
          : 'Documento assinado com sucesso!'
      })

    } catch (signatureError) {
      console.error('‚ùå Erro ao criar assinatura:', signatureError)
      console.error('‚ùå Stack trace:', signatureError instanceof Error ? signatureError.stack : 'N/A')
      return NextResponse.json(
        { error: 'Erro ao criar assinatura digital: ' + (signatureError instanceof Error ? signatureError.message : 'Erro desconhecido') },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('üí• Erro interno:', error)
    console.error('üí• Stack trace:', error instanceof Error ? error.stack : 'N/A')
    return NextResponse.json(
      { error: 'Erro interno do servidor: ' + (error instanceof Error ? error.message : 'Erro desconhecido') },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    console.log('üöÄ Iniciando requisi√ß√£o GET para /api/arsign (Sistema Simplificado)')
    
    const cookieStore = cookies()
    const supabase = createServerClient(supabaseConfig.url, supabaseConfig.anonKey, {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          cookieStore.set({ name, value, ...options })
        },
        remove(name: string, options: any) {
          cookieStore.set({ name, value: '', ...options })
        },
      },
    })

    // Verificar autentica√ß√£o do usu√°rio
    console.log('üîê Verificando autentica√ß√£o...')
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      console.error('‚ùå Erro de autentica√ß√£o:', authError)
      return NextResponse.json(
        { error: 'Usu√°rio n√£o autenticado' },
        { status: 401 }
      )
    }
    console.log('‚úÖ Usu√°rio autenticado:', user.id)

    // Buscar documentos da entidade do usu√°rio para sele√ß√£o (excluindo documentos de processos)
    console.log('üîç Buscando documentos da entidade:', user.id)
    
    // Buscar documentos dispon√≠veis para assinatura m√∫ltipla
    const { data: processDocumentIds, error: processIdsError } = await supabase
      .from('process_documents')
      .select('document_id')

    if (processIdsError) {
      console.warn('Erro ao buscar IDs de documentos de processos:', processIdsError)
    }

    const excludedIds = (processDocumentIds || [])
      .map(item => item.document_id)
      .filter(id => id !== null)

    let query = supabase
      .from('documents')
      .select('id, title, file_path, created_at')
      .eq('entity_id', user.id) // Buscar documentos da entidade do usu√°rio
      .like('file_path', '%.pdf')
      .order('created_at', { ascending: false })

    // Aplicar filtro de exclus√£o apenas se houver IDs para excluir
    if (excludedIds.length > 0) {
      query = query.not('id', 'in', `(${excludedIds.join(',')})`)
    }

    const { data: documents, error: docError } = await query

    if (docError) {
      console.error('‚ùå Erro ao buscar documentos:', docError)
      return NextResponse.json(
        { error: 'Erro ao carregar documentos' },
        { status: 500 }
      )
    }

    console.log('‚úÖ Documentos encontrados:', documents?.length || 0)

    return NextResponse.json({
      success: true,
      documents: documents || []
    })

  } catch (error) {
    console.error('üí• Erro interno:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

