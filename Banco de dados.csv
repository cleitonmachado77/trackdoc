full_ddl
"DROP TABLE IF EXISTS public.""approval_requests"" CASCADE;
CREATE TABLE public.""approval_requests"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""document_id"" uuid,\n  ""approver_id"" uuid,\n  ""status"" character varying(50) DEFAULT 'pending'::character varying,\n  ""step_order"" integer DEFAULT 1,\n  ""comments"" text,\n  ""approved_at"" timestamp with time zone,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""approval_requests_pkey"" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.""approval_workflows"" CASCADE;
CREATE TABLE public.""approval_workflows"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""document_id"" uuid,\n  ""approver_id"" uuid,\n  ""step_order"" integer NOT NULL,\n  ""status"" text DEFAULT 'pending'::text,\n  ""comments"" text,\n  ""approved_at"" timestamp with time zone,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""approval_workflows_approver_id_fkey"" FOREIGN KEY (approver_id) REFERENCES profiles(id),\n  CONSTRAINT ""approval_workflows_document_id_fkey"" FOREIGN KEY (document_id) REFERENCES documents(id) ON DELETE CASCADE,\n  CONSTRAINT ""approval_workflows_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""approval_workflows_status_check"" CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])))
);

DROP TABLE IF EXISTS public.""audit_logs"" CASCADE;
CREATE TABLE public.""audit_logs"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid,\n  ""action"" text NOT NULL,\n  ""table_name"" text,\n  ""record_id"" uuid,\n  ""old_values"" jsonb,\n  ""new_values"" jsonb,\n  ""ip_address"" inet,\n  ""user_agent"" text,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""entity_id"" uuid,\n  CONSTRAINT ""audit_logs_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""audit_logs_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""audit_logs_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id)
);

CREATE INDEX idx_audit_logs_entity_id ON public.audit_logs USING btree (entity_id)

DROP TABLE IF EXISTS public.""categories"" CASCADE;
CREATE TABLE public.""categories"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" text NOT NULL,\n  ""description"" text,\n  ""color"" text DEFAULT '#3B82F6'::text,\n  ""status"" text DEFAULT 'active'::text,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""entity_id"" uuid,\n  CONSTRAINT ""categories_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""categories_name_key"" UNIQUE (name),\n  CONSTRAINT ""categories_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""categories_status_check"" CHECK ((status = ANY (ARRAY['active'::text, 'inactive'::text])))
);

CREATE UNIQUE INDEX categories_name_key ON public.categories USING btree (name)
CREATE INDEX idx_categories_entity_id ON public.categories USING btree (entity_id)

DROP TABLE IF EXISTS public.""chat_conversations"" CASCADE;
CREATE TABLE public.""chat_conversations"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" character varying(255),\n  ""type"" character varying(20) NOT NULL DEFAULT 'direct'::character varying,\n  ""entity_id"" uuid NOT NULL,\n  ""created_by"" uuid NOT NULL,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""is_active"" boolean DEFAULT true,\n  CONSTRAINT ""chat_conversations_created_by_fkey"" FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE CASCADE,\n  CONSTRAINT ""chat_conversations_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""chat_conversations_pkey"" PRIMARY KEY (id)
);

CREATE INDEX idx_chat_conversations_entity_id ON public.chat_conversations USING btree (entity_id)
CREATE INDEX idx_chat_conversations_created_by ON public.chat_conversations USING btree (created_by)
CREATE INDEX idx_chat_conversations_type_entity ON public.chat_conversations USING btree (type, entity_id) WHERE ((type)::text = 'direct'::text)
CREATE INDEX idx_chat_conversations_updated_at ON public.chat_conversations USING btree (updated_at DESC)
CREATE INDEX idx_chat_conversations_direct_entity ON public.chat_conversations USING btree (type, entity_id, is_active) WHERE (((type)::text = 'direct'::text) AND (is_active = true))
CREATE INDEX idx_chat_conversations_direct_active ON public.chat_conversations USING btree (type, entity_id, is_active) WHERE (((type)::text = 'direct'::text) AND (is_active = true))

DROP TABLE IF EXISTS public.""chat_deleted_conversations"" CASCADE;
CREATE TABLE public.""chat_deleted_conversations"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""conversation_id"" uuid NOT NULL,\n  ""user_id"" uuid NOT NULL,\n  ""deleted_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""chat_deleted_conversations_conversation_id_fkey"" FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE,\n  CONSTRAINT ""chat_deleted_conversations_conversation_id_user_id_key"" UNIQUE (conversation_id, user_id),\n  CONSTRAINT ""chat_deleted_conversations_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""chat_deleted_conversations_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX chat_deleted_conversations_conversation_id_user_id_key ON public.chat_deleted_conversations USING btree (conversation_id, user_id)
CREATE INDEX idx_chat_deleted_conversations_conversation_id ON public.chat_deleted_conversations USING btree (conversation_id)
CREATE INDEX idx_chat_deleted_conversations_user_id ON public.chat_deleted_conversations USING btree (user_id)

DROP TABLE IF EXISTS public.""chat_hidden_conversations"" CASCADE;
CREATE TABLE public.""chat_hidden_conversations"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""conversation_id"" uuid NOT NULL,\n  ""user_id"" uuid NOT NULL,\n  ""hidden_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""chat_hidden_conversations_conversation_id_fkey"" FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE,\n  CONSTRAINT ""chat_hidden_conversations_conversation_id_user_id_key"" UNIQUE (conversation_id, user_id),\n  CONSTRAINT ""chat_hidden_conversations_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""chat_hidden_conversations_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX chat_hidden_conversations_conversation_id_user_id_key ON public.chat_hidden_conversations USING btree (conversation_id, user_id)
CREATE INDEX idx_chat_hidden_conversations_conversation_id ON public.chat_hidden_conversations USING btree (conversation_id)
CREATE INDEX idx_chat_hidden_conversations_user_id ON public.chat_hidden_conversations USING btree (user_id)
CREATE INDEX idx_chat_hidden_conversations_user ON public.chat_hidden_conversations USING btree (user_id, conversation_id)

DROP TABLE IF EXISTS public.""chat_message_reads"" CASCADE;
CREATE TABLE public.""chat_message_reads"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""message_id"" uuid NOT NULL,\n  ""user_id"" uuid NOT NULL,\n  ""read_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""chat_message_reads_message_id_fkey"" FOREIGN KEY (message_id) REFERENCES chat_messages(id) ON DELETE CASCADE,\n  CONSTRAINT ""chat_message_reads_message_id_user_id_key"" UNIQUE (message_id, user_id),\n  CONSTRAINT ""chat_message_reads_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""chat_message_reads_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX chat_message_reads_message_id_user_id_key ON public.chat_message_reads USING btree (message_id, user_id)
CREATE INDEX idx_chat_message_reads_message_id ON public.chat_message_reads USING btree (message_id)
CREATE INDEX idx_chat_message_reads_user_id ON public.chat_message_reads USING btree (user_id)

DROP TABLE IF EXISTS public.""chat_messages"" CASCADE;
CREATE TABLE public.""chat_messages"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""conversation_id"" uuid NOT NULL,\n  ""sender_id"" uuid NOT NULL,\n  ""message_text"" text,\n  ""message_type"" character varying(20) DEFAULT 'text'::character varying,\n  ""file_path"" text,\n  ""file_name"" text,\n  ""file_size"" bigint,\n  ""file_type"" text,\n  ""reply_to_id"" uuid,\n  ""is_edited"" boolean DEFAULT false,\n  ""edited_at"" timestamp with time zone,\n  ""is_deleted"" boolean DEFAULT false,\n  ""deleted_at"" timestamp with time zone,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""chat_messages_conversation_id_fkey"" FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE,\n  CONSTRAINT ""chat_messages_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""chat_messages_reply_to_id_fkey"" FOREIGN KEY (reply_to_id) REFERENCES chat_messages(id) ON DELETE SET NULL,\n  CONSTRAINT ""chat_messages_sender_id_fkey"" FOREIGN KEY (sender_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE INDEX idx_chat_messages_conversation_id ON public.chat_messages USING btree (conversation_id)
CREATE INDEX idx_chat_messages_sender_id ON public.chat_messages USING btree (sender_id)
CREATE INDEX idx_chat_messages_created_at ON public.chat_messages USING btree (created_at)
CREATE INDEX idx_chat_messages_conversation_created ON public.chat_messages USING btree (conversation_id, created_at DESC) WHERE (is_deleted = false)

DROP TABLE IF EXISTS public.""chat_participants"" CASCADE;
CREATE TABLE public.""chat_participants"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""conversation_id"" uuid NOT NULL,\n  ""user_id"" uuid NOT NULL,\n  ""joined_at"" timestamp with time zone DEFAULT now(),\n  ""last_read_at"" timestamp with time zone DEFAULT now(),\n  ""is_active"" boolean DEFAULT true,\n  CONSTRAINT ""chat_participants_conversation_id_fkey"" FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE,\n  CONSTRAINT ""chat_participants_conversation_id_user_id_key"" UNIQUE (conversation_id, user_id),\n  CONSTRAINT ""chat_participants_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""chat_participants_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX chat_participants_conversation_id_user_id_key ON public.chat_participants USING btree (conversation_id, user_id)
CREATE INDEX idx_chat_participants_conversation_id ON public.chat_participants USING btree (conversation_id)
CREATE INDEX idx_chat_participants_user_id ON public.chat_participants USING btree (user_id)
CREATE INDEX idx_chat_participants_user_active ON public.chat_participants USING btree (user_id, is_active) WHERE (is_active = true)
CREATE INDEX idx_chat_participants_conversation_active ON public.chat_participants USING btree (conversation_id, is_active) WHERE (is_active = true)
CREATE INDEX idx_chat_participants_users_active ON public.chat_participants USING btree (user_id, is_active) WHERE (is_active = true)

DROP TABLE IF EXISTS public.""departments"" CASCADE;
CREATE TABLE public.""departments"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" text NOT NULL,\n  ""description"" text,\n  ""manager_id"" uuid,\n  ""status"" text DEFAULT 'active'::text,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""entity_id"" uuid,\n  CONSTRAINT ""departments_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""departments_manager_id_fkey"" FOREIGN KEY (manager_id) REFERENCES profiles(id),\n  CONSTRAINT ""departments_name_key"" UNIQUE (name),\n  CONSTRAINT ""departments_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""departments_status_check"" CHECK ((status = ANY (ARRAY['active'::text, 'inactive'::text])))
);

CREATE UNIQUE INDEX departments_name_key ON public.departments USING btree (name)
CREATE INDEX idx_departments_entity_id ON public.departments USING btree (entity_id)
CREATE INDEX idx_departments_manager_id ON public.departments USING btree (manager_id)

DROP TABLE IF EXISTS public.""document_permissions"" CASCADE;
CREATE TABLE public.""document_permissions"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""document_id"" uuid NOT NULL,\n  ""department_id"" uuid,\n  ""user_id"" uuid,\n  ""permission_type"" text NOT NULL,\n  ""granted_by"" uuid NOT NULL,\n  ""granted_at"" timestamp with time zone DEFAULT now(),\n  ""expires_at"" timestamp with time zone,\n  CONSTRAINT ""document_permissions_department_id_fkey"" FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE,\n  CONSTRAINT ""document_permissions_document_id_fkey"" FOREIGN KEY (document_id) REFERENCES documents(id) ON DELETE CASCADE,\n  CONSTRAINT ""document_permissions_granted_by_fkey"" FOREIGN KEY (granted_by) REFERENCES profiles(id) ON DELETE CASCADE,\n  CONSTRAINT ""document_permissions_permission_type_check"" CHECK ((permission_type = ANY (ARRAY['read'::text, 'edit'::text, 'upload'::text, 'sign'::text, 'download'::text, 'approve'::text, 'reject'::text]))),\n  CONSTRAINT ""document_permissions_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""document_permissions_target_check"" CHECK ((((department_id IS NOT NULL) AND (user_id IS NULL)) OR ((department_id IS NULL) AND (user_id IS NOT NULL)))),\n  CONSTRAINT ""document_permissions_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE INDEX idx_document_permissions_document_id ON public.document_permissions USING btree (document_id)
CREATE INDEX idx_document_permissions_department_id ON public.document_permissions USING btree (department_id)
CREATE INDEX idx_document_permissions_user_id ON public.document_permissions USING btree (user_id)
CREATE INDEX idx_document_permissions_permission_type ON public.document_permissions USING btree (permission_type)

DROP TABLE IF EXISTS public.""document_signatures"" CASCADE;
CREATE TABLE public.""document_signatures"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid,\n  ""document_id"" uuid,\n  ""arqsign_document_id"" text,\n  ""status"" text DEFAULT 'pending'::text,\n  ""signature_url"" text,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""verification_code"" text,\n  ""verification_url"" text,\n  ""qr_code_data"" text,\n  ""document_hash"" text,\n  ""signature_hash"" text,\n  CONSTRAINT ""document_signatures_document_id_fkey"" FOREIGN KEY (document_id) REFERENCES documents(id) ON DELETE SET NULL,\n  CONSTRAINT ""document_signatures_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""document_signatures_status_check"" CHECK ((status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'cancelled'::text]))),\n  CONSTRAINT ""document_signatures_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

CREATE INDEX idx_document_signatures_user_id ON public.document_signatures USING btree (user_id)
CREATE INDEX idx_document_signatures_document_id ON public.document_signatures USING btree (document_id)
CREATE INDEX idx_document_signatures_status ON public.document_signatures USING btree (status)
CREATE INDEX idx_document_signatures_verification_code ON public.document_signatures USING btree (verification_code)
CREATE INDEX idx_document_signatures_document_hash ON public.document_signatures USING btree (document_hash)

DROP TABLE IF EXISTS public.""document_types"" CASCADE;
CREATE TABLE public.""document_types"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" text NOT NULL,\n  ""description"" text,\n  ""color"" text DEFAULT '#10B981'::text,\n  ""approval_required"" boolean DEFAULT false,\n  ""max_file_size"" integer DEFAULT 10485760,\n  ""allowed_extensions"" text[] DEFAULT ARRAY['pdf'::text, 'doc'::text, 'docx'::text, 'xls'::text, 'xlsx'::text, 'txt'::text],\n  ""status"" text DEFAULT 'active'::text,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""entity_id"" uuid,\n  ""prefix"" text DEFAULT 'DOC'::text,\n  ""required_fields"" text[] DEFAULT ARRAY['title'::text, 'author'::text],\n  ""retention_period"" integer DEFAULT 24,\n  ""template"" text,\n  CONSTRAINT ""document_types_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""document_types_name_key"" UNIQUE (name),\n  CONSTRAINT ""document_types_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""document_types_status_check"" CHECK ((status = ANY (ARRAY['active'::text, 'inactive'::text])))
);

CREATE UNIQUE INDEX document_types_name_key ON public.document_types USING btree (name)
CREATE INDEX idx_document_types_entity_id ON public.document_types USING btree (entity_id)

DROP TABLE IF EXISTS public.""document_versions"" CASCADE;
CREATE TABLE public.""document_versions"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""document_id"" uuid,\n  ""version_number"" integer NOT NULL,\n  ""file_path"" text,\n  ""file_name"" text,\n  ""file_size"" integer,\n  ""file_type"" text,\n  ""change_description"" text,\n  ""author_id"" uuid,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""document_versions_author_id_fkey"" FOREIGN KEY (author_id) REFERENCES profiles(id),\n  CONSTRAINT ""document_versions_document_id_fkey"" FOREIGN KEY (document_id) REFERENCES documents(id) ON DELETE CASCADE,\n  CONSTRAINT ""document_versions_pkey"" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.""documents"" CASCADE;
CREATE TABLE public.""documents"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""document_number"" text NOT NULL,\n  ""title"" text NOT NULL,\n  ""description"" text,\n  ""file_path"" text,\n  ""file_name"" text,\n  ""file_size"" integer,\n  ""file_type"" text,\n  ""document_type_id"" uuid,\n  ""category_id"" uuid,\n  ""department_id"" uuid,\n  ""author_id"" uuid NOT NULL,\n  ""status"" text DEFAULT 'draft'::text,\n  ""version"" integer DEFAULT 1,\n  ""is_public"" boolean DEFAULT false,\n  ""tags"" text[],\n  ""metadata"" jsonb,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""entity_id"" uuid,\n  CONSTRAINT ""documents_author_id_fkey"" FOREIGN KEY (author_id) REFERENCES profiles(id),\n  CONSTRAINT ""documents_category_id_fkey"" FOREIGN KEY (category_id) REFERENCES categories(id),\n  CONSTRAINT ""documents_department_id_fkey"" FOREIGN KEY (department_id) REFERENCES departments(id),\n  CONSTRAINT ""documents_document_number_key"" UNIQUE (document_number),\n  CONSTRAINT ""documents_document_type_id_fkey"" FOREIGN KEY (document_type_id) REFERENCES document_types(id),\n  CONSTRAINT ""documents_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""documents_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""documents_status_check"" CHECK ((status = ANY (ARRAY['draft'::text, 'pending_approval'::text, 'approved'::text, 'rejected'::text, 'archived'::text])))
);

CREATE UNIQUE INDEX documents_document_number_key ON public.documents USING btree (document_number)
CREATE INDEX idx_documents_entity_id ON public.documents USING btree (entity_id)

DROP TABLE IF EXISTS public.""entities"" CASCADE;
CREATE TABLE public.""entities"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" text NOT NULL,\n  ""legal_name"" text,\n  ""cnpj"" text,\n  ""email"" text NOT NULL,\n  ""phone"" text,\n  ""address"" jsonb,\n  ""logo_url"" text,\n  ""status"" text DEFAULT 'active'::text,\n  ""subscription_plan_id"" uuid,\n  ""max_users"" integer DEFAULT 5,\n  ""current_users"" integer DEFAULT 0,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""admin_user_id"" uuid,\n  ""type"" text DEFAULT 'company'::text,\n  ""description"" text,\n  CONSTRAINT ""entities_admin_user_id_fkey"" FOREIGN KEY (admin_user_id) REFERENCES profiles(id) ON DELETE SET NULL,\n  CONSTRAINT ""entities_cnpj_key"" UNIQUE (cnpj),\n  CONSTRAINT ""entities_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""entities_status_check"" CHECK ((status = ANY (ARRAY['active'::text, 'inactive'::text, 'suspended'::text]))),\n  CONSTRAINT ""entities_subscription_plan_id_fkey"" FOREIGN KEY (subscription_plan_id) REFERENCES plans(id),\n  CONSTRAINT ""entities_type_check"" CHECK ((type = ANY (ARRAY['company'::text, 'organization'::text, 'individual'::text])))
);

CREATE UNIQUE INDEX entities_cnpj_key ON public.entities USING btree (cnpj)
CREATE INDEX idx_entities_admin_user_id ON public.entities USING btree (admin_user_id)
CREATE INDEX idx_entities_type ON public.entities USING btree (type)

DROP TABLE IF EXISTS public.""entity_invitations"" CASCADE;
CREATE TABLE public.""entity_invitations"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""entity_id"" uuid,\n  ""email"" text NOT NULL,\n  ""role"" text DEFAULT 'user'::text,\n  ""status"" text DEFAULT 'pending'::text,\n  ""invited_by"" uuid,\n  ""token"" text NOT NULL,\n  ""expires_at"" timestamp with time zone NOT NULL,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""accepted_at"" timestamp with time zone,\n  ""message"" text,\n  ""entity_role"" text,\n  CONSTRAINT ""entity_invitations_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""entity_invitations_entity_role_check"" CHECK ((entity_role = ANY (ARRAY['user'::text, 'admin'::text, 'manager'::text, 'viewer'::text]))),\n  CONSTRAINT ""entity_invitations_invited_by_fkey"" FOREIGN KEY (invited_by) REFERENCES profiles(id),\n  CONSTRAINT ""entity_invitations_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""entity_invitations_role_check"" CHECK ((role = ANY (ARRAY['user'::text, 'admin'::text, 'manager'::text, 'viewer'::text]))),\n  CONSTRAINT ""entity_invitations_status_check"" CHECK ((status = ANY (ARRAY['pending'::text, 'accepted'::text, 'expired'::text, 'cancelled'::text]))),\n  CONSTRAINT ""entity_invitations_token_key"" UNIQUE (token)
);

CREATE UNIQUE INDEX entity_invitations_token_key ON public.entity_invitations USING btree (token)
CREATE INDEX idx_entity_invitations_entity_id ON public.entity_invitations USING btree (entity_id)
CREATE INDEX idx_entity_invitations_email ON public.entity_invitations USING btree (email)
CREATE INDEX idx_entity_invitations_status ON public.entity_invitations USING btree (status)
CREATE INDEX idx_entity_invitations_token ON public.entity_invitations USING btree (token)

DROP TABLE IF EXISTS public.""entity_subscriptions"" CASCADE;
CREATE TABLE public.""entity_subscriptions"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""entity_id"" uuid,\n  ""plan_id"" uuid,\n  ""status"" text DEFAULT 'active'::text,\n  ""current_period_start"" timestamp with time zone,\n  ""current_period_end"" timestamp with time zone,\n  ""trial_start"" timestamp with time zone,\n  ""trial_end"" timestamp with time zone,\n  ""is_trial"" boolean DEFAULT false,\n  ""auto_renew"" boolean DEFAULT true,\n  ""payment_method_id"" text,\n  ""next_billing_date"" timestamp with time zone,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""expires_at"" timestamp with time zone,\n  CONSTRAINT ""entity_subscriptions_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""entity_subscriptions_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""entity_subscriptions_plan_id_fkey"" FOREIGN KEY (plan_id) REFERENCES plans(id),\n  CONSTRAINT ""entity_subscriptions_status_check"" CHECK ((status = ANY (ARRAY['active'::text, 'canceled'::text, 'expired'::text, 'trial'::text])))
);

DROP TABLE IF EXISTS public.""invoices"" CASCADE;
CREATE TABLE public.""invoices"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""subscription_id"" uuid,\n  ""amount"" numeric(10,2) NOT NULL,\n  ""status"" text DEFAULT 'pending'::text,\n  ""description"" text NOT NULL,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""paid_at"" timestamp with time zone,\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""invoices_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""invoices_status_check"" CHECK ((status = ANY (ARRAY['paid'::text, 'pending'::text, 'failed'::text]))),\n  CONSTRAINT ""invoices_subscription_id_fkey"" FOREIGN KEY (subscription_id) REFERENCES subscriptions(id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS public.""multi_signature_approvals"" CASCADE;
CREATE TABLE public.""multi_signature_approvals"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""request_id"" uuid NOT NULL,\n  ""user_id"" uuid NOT NULL,\n  ""user_name"" text NOT NULL,\n  ""user_email"" text NOT NULL,\n  ""status"" text NOT NULL DEFAULT 'pending'::text,\n  ""signed_at"" timestamp with time zone,\n  ""signature_data"" jsonb,\n  ""comments"" text,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""multi_signature_approvals_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""multi_signature_approvals_request_id_fkey"" FOREIGN KEY (request_id) REFERENCES multi_signature_requests(id) ON DELETE CASCADE,\n  CONSTRAINT ""multi_signature_approvals_status_check"" CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text]))),\n  CONSTRAINT ""multi_signature_approvals_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

CREATE INDEX idx_multi_signature_approvals_request_id ON public.multi_signature_approvals USING btree (request_id)
CREATE INDEX idx_multi_signature_approvals_user_id ON public.multi_signature_approvals USING btree (user_id)
CREATE INDEX idx_multi_signature_approvals_status ON public.multi_signature_approvals USING btree (status)

DROP TABLE IF EXISTS public.""multi_signature_requests"" CASCADE;
CREATE TABLE public.""multi_signature_requests"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""document_id"" text NOT NULL,\n  ""document_name"" text NOT NULL,\n  ""document_path"" text NOT NULL,\n  ""requester_id"" uuid NOT NULL,\n  ""signature_template"" jsonb,\n  ""status"" text NOT NULL DEFAULT 'pending'::text,\n  ""total_signatures"" integer NOT NULL,\n  ""completed_signatures"" integer NOT NULL DEFAULT 0,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""completed_at"" timestamp with time zone,\n  ""metadata"" jsonb DEFAULT '{}'::jsonb,\n  ""signed_file_path"" text,\n  CONSTRAINT ""multi_signature_requests_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""multi_signature_requests_requester_id_fkey"" FOREIGN KEY (requester_id) REFERENCES auth.users(id),\n  CONSTRAINT ""multi_signature_requests_status_check"" CHECK ((status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'ready_for_signature'::text, 'completed'::text, 'cancelled'::text])))
);

CREATE INDEX idx_multi_signature_requests_requester_id ON public.multi_signature_requests USING btree (requester_id)
CREATE INDEX idx_multi_signature_requests_status ON public.multi_signature_requests USING btree (status)
CREATE INDEX idx_multi_signature_requests_document_id ON public.multi_signature_requests USING btree (document_id)

DROP TABLE IF EXISTS public.""notification_history"" CASCADE;
CREATE TABLE public.""notification_history"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""notification_id"" uuid,\n  ""recipient_email"" character varying(255) NOT NULL,\n  ""channel"" character varying(50) NOT NULL,\n  ""sent_at"" timestamp with time zone DEFAULT now(),\n  ""delivered_at"" timestamp with time zone,\n  ""read_at"" timestamp with time zone,\n  ""status"" character varying(50) DEFAULT 'sent'::character varying,\n  ""error_message"" text,\n  CONSTRAINT ""notification_history_channel_check"" CHECK (((channel)::text = ANY ((ARRAY['email'::character varying, 'push'::character varying, 'sms'::character varying])::text[]))),\n  CONSTRAINT ""notification_history_notification_id_fkey"" FOREIGN KEY (notification_id) REFERENCES notifications(id) ON DELETE CASCADE,\n  CONSTRAINT ""notification_history_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""notification_history_status_check"" CHECK (((status)::text = ANY ((ARRAY['sent'::character varying, 'delivered'::character varying, 'read'::character varying, 'failed'::character varying])::text[])))
);

CREATE INDEX idx_notification_history_notification_id ON public.notification_history USING btree (notification_id)
CREATE INDEX idx_notification_history_recipient ON public.notification_history USING btree (recipient_email)
CREATE INDEX idx_notification_history_sent_at ON public.notification_history USING btree (sent_at)

DROP TABLE IF EXISTS public.""notification_settings"" CASCADE;
CREATE TABLE public.""notification_settings"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid,\n  ""email_enabled"" boolean DEFAULT true,\n  ""push_enabled"" boolean DEFAULT true,\n  ""sms_enabled"" boolean DEFAULT false,\n  ""digest_frequency"" character varying(50) DEFAULT 'daily'::character varying,\n  ""quiet_hours_enabled"" boolean DEFAULT true,\n  ""quiet_hours_start"" time without time zone DEFAULT '22:00:00'::time without time zone,\n  ""quiet_hours_end"" time without time zone DEFAULT '08:00:00'::time without time zone,\n  ""auto_approval_reminders"" boolean DEFAULT true,\n  ""deadline_alerts"" boolean DEFAULT true,\n  ""system_maintenance"" boolean DEFAULT true,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""notification_settings_digest_frequency_check"" CHECK (((digest_frequency)::text = ANY ((ARRAY['immediate'::character varying, 'hourly'::character varying, 'daily'::character varying, 'weekly'::character varying])::text[]))),\n  CONSTRAINT ""notification_settings_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""notification_settings_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE,\n  CONSTRAINT ""notification_settings_user_id_key"" UNIQUE (user_id)
);

CREATE UNIQUE INDEX notification_settings_user_id_key ON public.notification_settings USING btree (user_id)
CREATE INDEX idx_notification_settings_user_id ON public.notification_settings USING btree (user_id)

DROP TABLE IF EXISTS public.""notification_templates"" CASCADE;
CREATE TABLE public.""notification_templates"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" character varying(255) NOT NULL,\n  ""subject"" character varying(500) NOT NULL,\n  ""content"" text NOT NULL,\n  ""type"" character varying(50) NOT NULL,\n  ""variables"" text[] DEFAULT '{}'::text[],\n  ""is_active"" boolean DEFAULT true,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""notification_templates_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""notification_templates_type_check"" CHECK (((type)::text = ANY ((ARRAY['approval'::character varying, 'deadline'::character varying, 'system'::character varying, 'custom'::character varying])::text[])))
);

CREATE INDEX idx_notification_templates_type ON public.notification_templates USING btree (type)
CREATE INDEX idx_notification_templates_active ON public.notification_templates USING btree (is_active)

DROP TABLE IF EXISTS public.""notifications"" CASCADE;
CREATE TABLE public.""notifications"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""title"" character varying(255) NOT NULL,\n  ""message"" text NOT NULL,\n  ""type"" character varying(50) NOT NULL,\n  ""priority"" character varying(50) NOT NULL,\n  ""recipients"" text[] NOT NULL DEFAULT '{}'::text[],\n  ""channels"" text[] NOT NULL DEFAULT '{}'::text[],\n  ""status"" character varying(50) NOT NULL DEFAULT 'draft'::character varying,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""scheduled_for"" timestamp with time zone,\n  ""sent_at"" timestamp with time zone,\n  ""read_count"" integer DEFAULT 0,\n  ""total_recipients"" integer DEFAULT 0,\n  ""created_by"" uuid,\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""notifications_channels_check"" CHECK ((array_length(channels, 1) > 0)),\n  CONSTRAINT ""notifications_created_by_fkey"" FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE CASCADE,\n  CONSTRAINT ""notifications_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""notifications_priority_check"" CHECK (((priority)::text = ANY ((ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'urgent'::character varying])::text[]))),\n  CONSTRAINT ""notifications_status_check"" CHECK (((status)::text = ANY ((ARRAY['pending'::character varying, 'sent'::character varying, 'read'::character varying, 'failed'::character varying])::text[]))),\n  CONSTRAINT ""notifications_type_check"" CHECK (((type)::text = ANY ((ARRAY['info'::character varying, 'warning'::character varying, 'success'::character varying, 'error'::character varying])::text[])))
);

CREATE INDEX idx_notifications_created_by ON public.notifications USING btree (created_by)
CREATE INDEX idx_notifications_status ON public.notifications USING btree (status)
CREATE INDEX idx_notifications_type ON public.notifications USING btree (type)
CREATE INDEX idx_notifications_created_at ON public.notifications USING btree (created_at)
CREATE INDEX idx_notifications_scheduled_for ON public.notifications USING btree (scheduled_for)

DROP TABLE IF EXISTS public.""ouvidoria_evaluations"" CASCADE;
CREATE TABLE public.""ouvidoria_evaluations"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""manifestation_id"" uuid,\n  ""overall_rating"" integer,\n  ""response_time_rating"" integer,\n  ""solution_quality_rating"" integer,\n  ""service_quality_rating"" integer,\n  ""comments"" text,\n  ""suggestions"" text,\n  ""evaluation_type"" character varying(50) DEFAULT 'final'::character varying,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""ouvidoria_evaluations_evaluation_type_check"" CHECK (((evaluation_type)::text = ANY ((ARRAY['intermediaria'::character varying, 'final'::character varying, 'reabertura'::character varying])::text[]))),\n  CONSTRAINT ""ouvidoria_evaluations_manifestation_id_fkey"" FOREIGN KEY (manifestation_id) REFERENCES ouvidoria_manifestations(id) ON DELETE CASCADE,\n  CONSTRAINT ""ouvidoria_evaluations_overall_rating_check"" CHECK (((overall_rating >= 1) AND (overall_rating <= 5))),\n  CONSTRAINT ""ouvidoria_evaluations_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""ouvidoria_evaluations_response_time_rating_check"" CHECK (((response_time_rating >= 1) AND (response_time_rating <= 5))),\n  CONSTRAINT ""ouvidoria_evaluations_service_quality_rating_check"" CHECK (((service_quality_rating >= 1) AND (service_quality_rating <= 5))),\n  CONSTRAINT ""ouvidoria_evaluations_solution_quality_rating_check"" CHECK (((solution_quality_rating >= 1) AND (solution_quality_rating <= 5)))
);

CREATE INDEX idx_evaluations_manifestation ON public.ouvidoria_evaluations USING btree (manifestation_id)

DROP TABLE IF EXISTS public.""ouvidoria_manifestation_types"" CASCADE;
CREATE TABLE public.""ouvidoria_manifestation_types"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" character varying(100) NOT NULL,\n  ""description"" text,\n  ""color"" character varying(7) DEFAULT '#3b82f6'::character varying,\n  ""is_active"" boolean DEFAULT true,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""ouvidoria_manifestation_types_pkey"" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.""ouvidoria_manifestations"" CASCADE;
CREATE TABLE public.""ouvidoria_manifestations"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""protocol_number"" character varying(50) NOT NULL,\n  ""manifestant_name"" character varying(255),\n  ""manifestant_email"" character varying(255),\n  ""manifestant_phone"" character varying(50),\n  ""manifestant_document"" character varying(50),\n  ""manifestant_address"" text,\n  ""title"" character varying(500) NOT NULL,\n  ""description"" text NOT NULL,\n  ""manifestation_type_id"" uuid,\n  ""confidentiality_level"" character varying(20) DEFAULT 'sem_sigilo'::character varying,\n  ""location_address"" text,\n  ""location_latitude"" numeric(10,8),\n  ""location_longitude"" numeric(11,8),\n  ""current_status_id"" uuid,\n  ""current_sector_id"" uuid,\n  ""priority"" character varying(20) DEFAULT 'normal'::character varying,\n  ""deadline_date"" date,\n  ""response_deadline"" date,\n  ""source"" character varying(50) DEFAULT 'web'::character varying,\n  ""external_id"" character varying(100),\n  ""access_token"" character varying(255),\n  ""is_public"" boolean DEFAULT true,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""closed_at"" timestamp with time zone,\n  ""created_by"" uuid,\n  ""updated_by"" uuid,\n  CONSTRAINT ""ouvidoria_manifestations_access_token_key"" UNIQUE (access_token),\n  CONSTRAINT ""ouvidoria_manifestations_confidentiality_level_check"" CHECK (((confidentiality_level)::text = ANY ((ARRAY['sem_sigilo'::character varying, 'sigilosa'::character varying, 'anonima'::character varying])::text[]))),\n  CONSTRAINT ""ouvidoria_manifestations_created_by_fkey"" FOREIGN KEY (created_by) REFERENCES auth.users(id),\n  CONSTRAINT ""ouvidoria_manifestations_current_sector_id_fkey"" FOREIGN KEY (current_sector_id) REFERENCES ouvidoria_sectors(id),\n  CONSTRAINT ""ouvidoria_manifestations_current_status_id_fkey"" FOREIGN KEY (current_status_id) REFERENCES ouvidoria_status(id),\n  CONSTRAINT ""ouvidoria_manifestations_manifestation_type_id_fkey"" FOREIGN KEY (manifestation_type_id) REFERENCES ouvidoria_manifestation_types(id),\n  CONSTRAINT ""ouvidoria_manifestations_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""ouvidoria_manifestations_priority_check"" CHECK (((priority)::text = ANY ((ARRAY['baixa'::character varying, 'normal'::character varying, 'alta'::character varying, 'urgente'::character varying])::text[]))),\n  CONSTRAINT ""ouvidoria_manifestations_protocol_number_key"" UNIQUE (protocol_number),\n  CONSTRAINT ""ouvidoria_manifestations_source_check"" CHECK (((source)::text = ANY ((ARRAY['web'::character varying, 'presencial'::character varying, 'telefone'::character varying, 'email'::character varying, 'redes_sociais'::character varying])::text[]))),\n  CONSTRAINT ""ouvidoria_manifestations_updated_by_fkey"" FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);

CREATE UNIQUE INDEX ouvidoria_manifestations_protocol_number_key ON public.ouvidoria_manifestations USING btree (protocol_number)
CREATE UNIQUE INDEX ouvidoria_manifestations_access_token_key ON public.ouvidoria_manifestations USING btree (access_token)
CREATE INDEX idx_manifestations_protocol ON public.ouvidoria_manifestations USING btree (protocol_number)
CREATE INDEX idx_manifestations_status ON public.ouvidoria_manifestations USING btree (current_status_id)
CREATE INDEX idx_manifestations_sector ON public.ouvidoria_manifestations USING btree (current_sector_id)
CREATE INDEX idx_manifestations_type ON public.ouvidoria_manifestations USING btree (manifestation_type_id)
CREATE INDEX idx_manifestations_created_at ON public.ouvidoria_manifestations USING btree (created_at)
CREATE INDEX idx_manifestations_manifestant_email ON public.ouvidoria_manifestations USING btree (manifestant_email)
CREATE INDEX idx_manifestations_deadline ON public.ouvidoria_manifestations USING btree (deadline_date)

DROP TABLE IF EXISTS public.""ouvidoria_movements"" CASCADE;
CREATE TABLE public.""ouvidoria_movements"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""manifestation_id"" uuid,\n  ""from_sector_id"" uuid,\n  ""to_sector_id"" uuid,\n  ""from_status_id"" uuid,\n  ""to_status_id"" uuid,\n  ""movement_type"" character varying(50) NOT NULL,\n  ""description"" text,\n  ""internal_notes"" text,\n  ""is_public"" boolean DEFAULT true,\n  ""requires_response"" boolean DEFAULT false,\n  ""response_deadline"" date,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""created_by"" uuid,\n  CONSTRAINT ""ouvidoria_movements_created_by_fkey"" FOREIGN KEY (created_by) REFERENCES auth.users(id),\n  CONSTRAINT ""ouvidoria_movements_from_sector_id_fkey"" FOREIGN KEY (from_sector_id) REFERENCES ouvidoria_sectors(id),\n  CONSTRAINT ""ouvidoria_movements_from_status_id_fkey"" FOREIGN KEY (from_status_id) REFERENCES ouvidoria_status(id),\n  CONSTRAINT ""ouvidoria_movements_manifestation_id_fkey"" FOREIGN KEY (manifestation_id) REFERENCES ouvidoria_manifestations(id) ON DELETE CASCADE,\n  CONSTRAINT ""ouvidoria_movements_movement_type_check"" CHECK (((movement_type)::text = ANY ((ARRAY['encaminhamento'::character varying, 'resposta'::character varying, 'solicitacao_info'::character varying, 'reabertura'::character varying, 'conclusao'::character varying])::text[]))),\n  CONSTRAINT ""ouvidoria_movements_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""ouvidoria_movements_to_sector_id_fkey"" FOREIGN KEY (to_sector_id) REFERENCES ouvidoria_sectors(id),\n  CONSTRAINT ""ouvidoria_movements_to_status_id_fkey"" FOREIGN KEY (to_status_id) REFERENCES ouvidoria_status(id)
);

CREATE INDEX idx_movements_manifestation ON public.ouvidoria_movements USING btree (manifestation_id)
CREATE INDEX idx_movements_created_at ON public.ouvidoria_movements USING btree (created_at)

DROP TABLE IF EXISTS public.""ouvidoria_responses"" CASCADE;
CREATE TABLE public.""ouvidoria_responses"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""manifestation_id"" uuid,\n  ""movement_id"" uuid,\n  ""response_text"" text NOT NULL,\n  ""is_final"" boolean DEFAULT false,\n  ""is_satisfactory"" boolean,\n  ""sent_to_manifestant"" boolean DEFAULT false,\n  ""sent_at"" timestamp with time zone,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""created_by"" uuid,\n  CONSTRAINT ""ouvidoria_responses_created_by_fkey"" FOREIGN KEY (created_by) REFERENCES auth.users(id),\n  CONSTRAINT ""ouvidoria_responses_manifestation_id_fkey"" FOREIGN KEY (manifestation_id) REFERENCES ouvidoria_manifestations(id) ON DELETE CASCADE,\n  CONSTRAINT ""ouvidoria_responses_movement_id_fkey"" FOREIGN KEY (movement_id) REFERENCES ouvidoria_movements(id),\n  CONSTRAINT ""ouvidoria_responses_pkey"" PRIMARY KEY (id)
);

CREATE INDEX idx_responses_manifestation ON public.ouvidoria_responses USING btree (manifestation_id)

DROP TABLE IF EXISTS public.""ouvidoria_sectors"" CASCADE;
CREATE TABLE public.""ouvidoria_sectors"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" character varying(255) NOT NULL,\n  ""description"" text,\n  ""email"" character varying(255),\n  ""phone"" character varying(50),\n  ""address"" text,\n  ""responsible_name"" character varying(255),\n  ""responsible_email"" character varying(255),\n  ""is_active"" boolean DEFAULT true,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""ouvidoria_sectors_pkey"" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.""ouvidoria_settings"" CASCADE;
CREATE TABLE public.""ouvidoria_settings"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""entity_id"" uuid,\n  ""name"" character varying(255) NOT NULL,\n  ""description"" text,\n  ""email"" character varying(255),\n  ""phone"" character varying(50),\n  ""address"" text,\n  ""default_response_deadline_days"" integer DEFAULT 30,\n  ""urgent_response_deadline_days"" integer DEFAULT 5,\n  ""email_integration_enabled"" boolean DEFAULT false,\n  ""email_server"" character varying(255),\n  ""email_port"" integer,\n  ""email_username"" character varying(255),\n  ""email_password"" character varying(255),\n  ""email_ssl"" boolean DEFAULT true,\n  ""public_registration_enabled"" boolean DEFAULT true,\n  ""anonymous_registration_enabled"" boolean DEFAULT true,\n  ""location_required"" boolean DEFAULT false,\n  ""notification_email_enabled"" boolean DEFAULT true,\n  ""notification_sms_enabled"" boolean DEFAULT false,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""ouvidoria_settings_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id),\n  CONSTRAINT ""ouvidoria_settings_pkey"" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.""ouvidoria_status"" CASCADE;
CREATE TABLE public.""ouvidoria_status"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" character varying(100) NOT NULL,\n  ""description"" text,\n  ""color"" character varying(7) DEFAULT '#6b7280'::character varying,\n  ""is_final"" boolean DEFAULT false,\n  ""order_index"" integer DEFAULT 0,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""ouvidoria_status_pkey"" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.""payment_methods"" CASCADE;
CREATE TABLE public.""payment_methods"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid,\n  ""type"" text NOT NULL,\n  ""brand"" text,\n  ""last4"" text,\n  ""expiry_month"" integer,\n  ""expiry_year"" integer,\n  ""is_default"" boolean DEFAULT false,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""payment_methods_expiry_month_check"" CHECK (((expiry_month >= 1) AND (expiry_month <= 12))),\n  CONSTRAINT ""payment_methods_expiry_year_check"" CHECK ((expiry_year >= 2020)),\n  CONSTRAINT ""payment_methods_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""payment_methods_type_check"" CHECK ((type = ANY (ARRAY['card'::text, 'pix'::text, 'bank_transfer'::text]))),\n  CONSTRAINT ""payment_methods_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS public.""plans"" CASCADE;
CREATE TABLE public.""plans"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""name"" text NOT NULL,\n  ""description"" text,\n  ""price_monthly"" numeric(10,2) NOT NULL,\n  ""price_yearly"" numeric(10,2),\n  ""max_users"" integer DEFAULT 1,\n  ""max_storage_gb"" integer DEFAULT 1,\n  ""max_documents"" integer DEFAULT 10,\n  ""trial_days"" integer DEFAULT 0,\n  ""is_trial"" boolean DEFAULT false,\n  ""features"" jsonb DEFAULT '[]'::jsonb,\n  ""is_active"" boolean DEFAULT true,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""plans_name_key"" UNIQUE (name),\n  CONSTRAINT ""plans_pkey"" PRIMARY KEY (id)
);

CREATE UNIQUE INDEX plans_name_key ON public.plans USING btree (name)

DROP TABLE IF EXISTS public.""profiles"" CASCADE;
CREATE TABLE public.""profiles"" (
  ""id"" uuid NOT NULL,\n  ""full_name"" text NOT NULL,\n  ""avatar_url"" text,\n  ""email"" text NOT NULL,\n  ""role"" text DEFAULT 'user'::text,\n  ""status"" text DEFAULT 'active'::text,\n  ""permissions"" jsonb DEFAULT '[""read"", ""write""]'::jsonb,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""selected_plan_id"" uuid,\n  ""registration_completed"" boolean DEFAULT false,\n  ""entity_id"" uuid,\n  ""registration_type"" text DEFAULT 'individual'::text,\n  ""entity_role"" text DEFAULT 'user'::text,\n  ""last_login"" timestamp with time zone,\n  ""phone"" text,\n  ""department"" text,\n  ""position"" text,\n  CONSTRAINT ""profiles_email_key"" UNIQUE (email),\n  CONSTRAINT ""profiles_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE SET NULL,\n  CONSTRAINT ""profiles_entity_role_check"" CHECK ((entity_role = ANY (ARRAY['user'::text, 'admin'::text, 'manager'::text, 'viewer'::text]))),\n  CONSTRAINT ""profiles_id_fkey"" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE,\n  CONSTRAINT ""profiles_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""profiles_registration_type_check"" CHECK ((registration_type = ANY (ARRAY['individual'::text, 'entity_admin'::text, 'entity_user'::text]))),\n  CONSTRAINT ""profiles_role_check"" CHECK ((role = ANY (ARRAY['user'::text, 'admin'::text, 'manager'::text]))),\n  CONSTRAINT ""profiles_selected_plan_id_fkey"" FOREIGN KEY (selected_plan_id) REFERENCES plans(id),\n  CONSTRAINT ""profiles_status_check"" CHECK ((status = ANY (ARRAY['active'::text, 'inactive'::text, 'suspended'::text])))
);

CREATE UNIQUE INDEX profiles_email_key ON public.profiles USING btree (email)
CREATE INDEX idx_profiles_entity_id ON public.profiles USING btree (entity_id)
CREATE INDEX idx_profiles_entity_role ON public.profiles USING btree (entity_role)
CREATE INDEX idx_profiles_status ON public.profiles USING btree (status)

DROP TABLE IF EXISTS public.""signature_templates"" CASCADE;
CREATE TABLE public.""signature_templates"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid,\n  ""title"" text NOT NULL DEFAULT 'ASSINATURA DIGITAL'::text,\n  ""show_date"" boolean DEFAULT true,\n  ""show_time"" boolean DEFAULT true,\n  ""show_user_name"" boolean DEFAULT true,\n  ""show_email"" boolean DEFAULT true,\n  ""show_verification_code"" boolean DEFAULT true,\n  ""show_hash_code"" boolean DEFAULT true,\n  ""position"" text DEFAULT 'side-right'::text,\n  ""background_color"" text DEFAULT '#f8fafc'::text,\n  ""border_color"" text DEFAULT '#3b82f6'::text,\n  ""text_color"" text DEFAULT '#1e293b'::text,\n  ""font_size"" text DEFAULT '10'::text,\n  ""include_logo"" boolean DEFAULT false,\n  ""custom_text"" text DEFAULT 'Este documento foi assinado digitalmente com certificado válido.'::text,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""signature_templates_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""signature_templates_position_check"" CHECK ((""position"" = ANY (ARRAY['bottom-left'::text, 'bottom-center'::text, 'bottom-right'::text, 'side-right'::text]))),\n  CONSTRAINT ""signature_templates_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE,\n  CONSTRAINT ""signature_templates_user_id_key"" UNIQUE (user_id)
);

CREATE UNIQUE INDEX signature_templates_user_id_key ON public.signature_templates USING btree (user_id)
CREATE INDEX idx_signature_templates_user_id ON public.signature_templates USING btree (user_id)
CREATE INDEX idx_signature_templates_created_at ON public.signature_templates USING btree (created_at)

DROP TABLE IF EXISTS public.""subscriptions"" CASCADE;
CREATE TABLE public.""subscriptions"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid,\n  ""plan_name"" text NOT NULL,\n  ""plan_description"" text,\n  ""plan_price"" numeric(10,2) NOT NULL,\n  ""status"" text DEFAULT 'active'::text,\n  ""current_period_start"" timestamp with time zone,\n  ""current_period_end"" timestamp with time zone,\n  ""trial_start"" timestamp with time zone,\n  ""trial_end"" timestamp with time zone,\n  ""is_trial"" boolean DEFAULT false,\n  ""features"" jsonb,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  ""plan_id"" uuid,\n  ""auto_renew"" boolean DEFAULT true,\n  ""payment_method_id"" text,\n  ""next_billing_date"" timestamp with time zone,\n  CONSTRAINT ""subscriptions_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""subscriptions_plan_id_fkey"" FOREIGN KEY (plan_id) REFERENCES plans(id),\n  CONSTRAINT ""subscriptions_status_check"" CHECK ((status = ANY (ARRAY['active'::text, 'canceled'::text, 'expired'::text, 'trial'::text]))),\n  CONSTRAINT ""subscriptions_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS public.""usage"" CASCADE;
CREATE TABLE public.""usage"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid,\n  ""metric_name"" text NOT NULL,\n  ""metric_value"" integer DEFAULT 0,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""usage_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""usage_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE,\n  CONSTRAINT ""usage_user_id_metric_name_key"" UNIQUE (user_id, metric_name)
);

CREATE UNIQUE INDEX usage_user_id_metric_name_key ON public.usage USING btree (user_id, metric_name)

DROP TABLE IF EXISTS public.""usage_metrics"" CASCADE;
CREATE TABLE public.""usage_metrics"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid,\n  ""metric_name"" text NOT NULL,\n  ""metric_value"" integer DEFAULT 0,\n  ""limit_value"" integer,\n  ""period_start"" timestamp with time zone,\n  ""period_end"" timestamp with time zone,\n  ""created_at"" timestamp with time zone DEFAULT now(),\n  ""updated_at"" timestamp with time zone DEFAULT now(),\n  CONSTRAINT ""usage_metrics_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""usage_metrics_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS public.""user_departments"" CASCADE;
CREATE TABLE public.""user_departments"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""user_id"" uuid NOT NULL,\n  ""department_id"" uuid NOT NULL,\n  ""role_in_department"" text DEFAULT 'member'::text,\n  ""is_primary"" boolean DEFAULT false,\n  ""assigned_at"" timestamp with time zone DEFAULT now(),\n  ""assigned_by"" uuid,\n  ""notes"" text,\n  CONSTRAINT ""user_departments_assigned_by_fkey"" FOREIGN KEY (assigned_by) REFERENCES profiles(id),\n  CONSTRAINT ""user_departments_department_id_fkey"" FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE,\n  CONSTRAINT ""user_departments_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""user_departments_role_in_department_check"" CHECK ((role_in_department = ANY (ARRAY['member'::text, 'manager'::text, 'supervisor'::text]))),\n  CONSTRAINT ""user_departments_user_id_department_id_key"" UNIQUE (user_id, department_id),\n  CONSTRAINT ""user_departments_user_id_fkey"" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX user_departments_user_id_department_id_key ON public.user_departments USING btree (user_id, department_id)
CREATE INDEX idx_user_departments_user_id ON public.user_departments USING btree (user_id)
CREATE INDEX idx_user_departments_department_id ON public.user_departments USING btree (department_id)
CREATE INDEX idx_user_departments_entity ON public.user_departments USING btree (user_id, department_id)

DROP TABLE IF EXISTS public.""workflow_executions"" CASCADE;
CREATE TABLE public.""workflow_executions"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""process_id"" uuid NOT NULL,\n  ""step_id"" uuid NOT NULL,\n  ""assigned_to"" uuid,\n  ""status"" text NOT NULL DEFAULT 'pending'::text,\n  ""action_taken"" text,\n  ""comments"" text,\n  ""metadata"" jsonb NOT NULL DEFAULT '{}'::jsonb,\n  ""started_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  ""completed_at"" timestamp with time zone,\n  ""created_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  ""updated_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  CONSTRAINT ""workflow_executions_assigned_to_fkey"" FOREIGN KEY (assigned_to) REFERENCES profiles(id) ON DELETE SET NULL,\n  CONSTRAINT ""workflow_executions_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""workflow_executions_process_id_fkey"" FOREIGN KEY (process_id) REFERENCES workflow_processes(id) ON DELETE CASCADE,\n  CONSTRAINT ""workflow_executions_status_check"" CHECK ((status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text, 'skipped'::text, 'cancelled'::text]))),\n  CONSTRAINT ""workflow_executions_step_id_fkey"" FOREIGN KEY (step_id) REFERENCES workflow_template_steps(id) ON DELETE CASCADE
);

CREATE INDEX idx_we_process ON public.workflow_executions USING btree (process_id)
CREATE INDEX idx_we_step ON public.workflow_executions USING btree (step_id)
CREATE INDEX idx_we_assigned ON public.workflow_executions USING btree (assigned_to)
CREATE INDEX idx_we_status ON public.workflow_executions USING btree (status)

DROP TABLE IF EXISTS public.""workflow_logs"" CASCADE;
CREATE TABLE public.""workflow_logs"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""process_id"" uuid NOT NULL,\n  ""execution_id"" uuid,\n  ""actor_id"" uuid,\n  ""action"" text NOT NULL,\n  ""details"" jsonb NOT NULL DEFAULT '{}'::jsonb,\n  ""created_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  CONSTRAINT ""workflow_logs_actor_id_fkey"" FOREIGN KEY (actor_id) REFERENCES profiles(id) ON DELETE SET NULL,\n  CONSTRAINT ""workflow_logs_execution_id_fkey"" FOREIGN KEY (execution_id) REFERENCES workflow_executions(id) ON DELETE SET NULL,\n  CONSTRAINT ""workflow_logs_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""workflow_logs_process_id_fkey"" FOREIGN KEY (process_id) REFERENCES workflow_processes(id) ON DELETE CASCADE
);

CREATE INDEX idx_wl_process ON public.workflow_logs USING btree (process_id)
CREATE INDEX idx_wl_execution ON public.workflow_logs USING btree (execution_id)

DROP TABLE IF EXISTS public.""workflow_processes"" CASCADE;
CREATE TABLE public.""workflow_processes"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""template_id"" uuid NOT NULL,\n  ""document_id"" uuid NOT NULL,\n  ""name"" text NOT NULL,\n  ""status"" text NOT NULL DEFAULT 'active'::text,\n  ""current_step_id"" uuid,\n  ""started_by"" uuid NOT NULL,\n  ""started_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  ""completed_at"" timestamp with time zone,\n  ""created_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  ""updated_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  CONSTRAINT ""workflow_processes_current_step_id_fkey"" FOREIGN KEY (current_step_id) REFERENCES workflow_template_steps(id) ON DELETE SET NULL,\n  CONSTRAINT ""workflow_processes_document_id_fkey"" FOREIGN KEY (document_id) REFERENCES documents(id) ON DELETE CASCADE,\n  CONSTRAINT ""workflow_processes_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""workflow_processes_started_by_fkey"" FOREIGN KEY (started_by) REFERENCES profiles(id) ON DELETE CASCADE,\n  CONSTRAINT ""workflow_processes_status_check"" CHECK ((status = ANY (ARRAY['active'::text, 'completed'::text, 'cancelled'::text, 'paused'::text]))),\n  CONSTRAINT ""workflow_processes_template_id_fkey"" FOREIGN KEY (template_id) REFERENCES workflow_templates(id) ON DELETE CASCADE
);

CREATE INDEX idx_wp_template ON public.workflow_processes USING btree (template_id)
CREATE INDEX idx_wp_document ON public.workflow_processes USING btree (document_id)
CREATE INDEX idx_wp_status ON public.workflow_processes USING btree (status)
CREATE INDEX idx_wp_current_step ON public.workflow_processes USING btree (current_step_id)

DROP TABLE IF EXISTS public.""workflow_template_steps"" CASCADE;
CREATE TABLE public.""workflow_template_steps"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""template_id"" uuid NOT NULL,\n  ""step_order"" integer NOT NULL,\n  ""type"" text NOT NULL,\n  ""name"" text NOT NULL,\n  ""metadata"" jsonb NOT NULL DEFAULT '{}'::jsonb,\n  ""ui_position"" jsonb NOT NULL DEFAULT jsonb_build_object('x', 0, 'y', 0),\n  ""created_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  ""updated_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  CONSTRAINT ""workflow_template_steps_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""workflow_template_steps_template_id_fkey"" FOREIGN KEY (template_id) REFERENCES workflow_templates(id) ON DELETE CASCADE,\n  CONSTRAINT ""workflow_template_steps_template_id_step_order_key"" UNIQUE (template_id, step_order),\n  CONSTRAINT ""workflow_template_steps_type_check"" CHECK ((type = ANY (ARRAY['user'::text, 'action'::text])))
);

CREATE UNIQUE INDEX workflow_template_steps_template_id_step_order_key ON public.workflow_template_steps USING btree (template_id, step_order)
CREATE INDEX idx_wts_template ON public.workflow_template_steps USING btree (template_id)
CREATE INDEX idx_wts_type ON public.workflow_template_steps USING btree (type)

DROP TABLE IF EXISTS public.""workflow_template_transitions"" CASCADE;
CREATE TABLE public.""workflow_template_transitions"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""template_id"" uuid NOT NULL,\n  ""from_step_id"" uuid NOT NULL,\n  ""to_step_id"" uuid NOT NULL,\n  ""condition"" text NOT NULL DEFAULT 'always'::text,\n  ""metadata"" jsonb NOT NULL DEFAULT '{}'::jsonb,\n  ""created_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  CONSTRAINT ""workflow_template_transitions_condition_check"" CHECK ((condition = ANY (ARRAY['always'::text, 'approved'::text, 'rejected'::text, 'custom'::text]))),\n  CONSTRAINT ""workflow_template_transitions_from_step_id_fkey"" FOREIGN KEY (from_step_id) REFERENCES workflow_template_steps(id) ON DELETE CASCADE,\n  CONSTRAINT ""workflow_template_transitions_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""workflow_template_transitions_template_id_fkey"" FOREIGN KEY (template_id) REFERENCES workflow_templates(id) ON DELETE CASCADE,\n  CONSTRAINT ""workflow_template_transitions_to_step_id_fkey"" FOREIGN KEY (to_step_id) REFERENCES workflow_template_steps(id) ON DELETE CASCADE
);

CREATE INDEX idx_wtt_template ON public.workflow_template_transitions USING btree (template_id)
CREATE INDEX idx_wtt_from_step ON public.workflow_template_transitions USING btree (from_step_id)

DROP TABLE IF EXISTS public.""workflow_templates"" CASCADE;
CREATE TABLE public.""workflow_templates"" (
  ""id"" uuid NOT NULL DEFAULT gen_random_uuid(),\n  ""entity_id"" uuid,\n  ""name"" text NOT NULL,\n  ""description"" text,\n  ""status"" text NOT NULL DEFAULT 'draft'::text,\n  ""created_by"" uuid NOT NULL,\n  ""created_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  ""updated_at"" timestamp with time zone NOT NULL DEFAULT now(),\n  CONSTRAINT ""workflow_templates_created_by_fkey"" FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE CASCADE,\n  CONSTRAINT ""workflow_templates_entity_id_fkey"" FOREIGN KEY (entity_id) REFERENCES entities(id) ON DELETE CASCADE,\n  CONSTRAINT ""workflow_templates_pkey"" PRIMARY KEY (id),\n  CONSTRAINT ""workflow_templates_status_check"" CHECK ((status = ANY (ARRAY['draft'::text, 'active'::text, 'inactive'::text])))
);

CREATE INDEX idx_workflow_templates_entity ON public.workflow_templates USING btree (entity_id)
CREATE INDEX idx_workflow_templates_created_by ON public.workflow_templates USING btree (created_by)
CREATE INDEX idx_workflow_templates_status ON public.workflow_templates USING btree (status)"