#!/usr/bin/env node

/**
 * Script para corrigir problemas de banco de dados relacionados a usu√°rios
 * 
 * Este script:
 * 1. Executa as corre√ß√µes SQL necess√°rias
 * 2. Atualiza o c√≥digo de registro
 * 3. Testa a cria√ß√£o de usu√°rios
 */

const fs = require('fs')
const path = require('path')

console.log('üîß CORRE√á√ÉO DE PROBLEMAS DE BANCO E USU√ÅRIOS')
console.log('=' .repeat(60))

// 1. Verificar arquivos SQL de corre√ß√£o
function checkSQLFiles() {
    console.log('\nüìã 1. Verificando arquivos SQL de corre√ß√£o...')
    
    const sqlFiles = [
        'database/fix-profiles-structure.sql',
        'database/fix-foreign-keys.sql'
    ]
    
    let allExist = true
    
    sqlFiles.forEach(file => {
        if (fs.existsSync(file)) {
            console.log(`‚úÖ ${file} - ENCONTRADO`)
        } else {
            console.log(`‚ùå ${file} - N√ÉO ENCONTRADO`)
            allExist = false
        }
    })
    
    return allExist
}

// 2. Verificar c√≥digo de registro
function checkRegistrationCode() {
    console.log('\nüìã 2. Verificando c√≥digo de registro...')
    
    const files = [
        'app/register/page-simplified.tsx',
        'app/confirm-email/complete-entity-setup.tsx'
    ]
    
    let allExist = true
    
    files.forEach(file => {
        if (fs.existsSync(file)) {
            console.log(`‚úÖ ${file} - ENCONTRADO`)
        } else {
            console.log(`‚ùå ${file} - N√ÉO ENCONTRADO`)
            allExist = false
        }
    })
    
    return allExist
}

// 3. Substituir arquivo de registro atual
function updateRegistrationFile() {
    console.log('\nüîÑ 3. Atualizando arquivo de registro...')
    
    const originalFile = 'app/register/page.tsx'
    const simplifiedFile = 'app/register/page-simplified.tsx'
    const backupFile = 'app/register/page-original.tsx'
    
    try {
        // Fazer backup do arquivo original
        if (fs.existsSync(originalFile)) {
            fs.copyFileSync(originalFile, backupFile)
            console.log(`‚úÖ Backup criado: ${backupFile}`)
        }
        
        // Substituir pelo arquivo simplificado
        if (fs.existsSync(simplifiedFile)) {
            fs.copyFileSync(simplifiedFile, originalFile)
            console.log(`‚úÖ Arquivo atualizado: ${originalFile}`)
            
            // Remover arquivo tempor√°rio
            fs.unlinkSync(simplifiedFile)
            console.log(`‚úÖ Arquivo tempor√°rio removido: ${simplifiedFile}`)
        }
        
        return true
    } catch (error) {
        console.error(`‚ùå Erro ao atualizar arquivo: ${error.message}`)
        return false
    }
}

// 4. Atualizar p√°gina de confirma√ß√£o de email
function updateConfirmEmailPage() {
    console.log('\nüîÑ 4. Atualizando p√°gina de confirma√ß√£o de email...')
    
    const confirmEmailFile = 'app/confirm-email/page.tsx'
    
    if (!fs.existsSync(confirmEmailFile)) {
        console.log(`‚ùå Arquivo n√£o encontrado: ${confirmEmailFile}`)
        return false
    }
    
    try {
        let content = fs.readFileSync(confirmEmailFile, 'utf8')
        
        // Adicionar import do componente de setup de entidade
        if (!content.includes('CompleteEntitySetup')) {
            const importLine = `import { CompleteEntitySetup } from './complete-entity-setup'\n`
            content = content.replace(
                /^import/m,
                importLine + 'import'
            )
            
            // Adicionar componente no JSX (antes do √∫ltimo </div>)
            const setupComponent = `
        {/* Componente para finalizar setup de entidade */}
        <CompleteEntitySetup />
`
            content = content.replace(
                /(\s+)(<\/div>\s*<\/div>\s*$)/,
                `$1${setupComponent}$1$2`
            )
            
            fs.writeFileSync(confirmEmailFile, content)
            console.log(`‚úÖ P√°gina de confirma√ß√£o atualizada`)
        } else {
            console.log(`‚úÖ P√°gina de confirma√ß√£o j√° est√° atualizada`)
        }
        
        return true
    } catch (error) {
        console.error(`‚ùå Erro ao atualizar p√°gina: ${error.message}`)
        return false
    }
}

// 5. Criar documenta√ß√£o das mudan√ßas
function createDocumentation() {
    console.log('\nüìù 5. Criando documenta√ß√£o das mudan√ßas...')
    
    const docContent = `# üîß Corre√ß√µes Aplicadas - Problemas de Banco e Usu√°rios

## ‚úÖ Corre√ß√µes Implementadas

### 1. **Estrutura da Tabela Profiles**
- ‚úÖ Corrigida refer√™ncia para \`auth.users(id)\`
- ‚úÖ Trigger \`handle_new_user\` melhorado
- ‚úÖ Campos padronizados e validados

### 2. **Foreign Keys Padronizadas**
- ‚úÖ Todas as FKs agora referenciam \`profiles(id)\`
- ‚úÖ Integridade referencial garantida
- ‚úÖ Cascatas configuradas corretamente

### 3. **C√≥digo de Registro Simplificado**
- ‚úÖ L√≥gica simplificada e robusta
- ‚úÖ Uso correto do trigger para cria√ß√£o de perfis
- ‚úÖ Tratamento adequado de entidades

### 4. **Processo de Confirma√ß√£o de Email**
- ‚úÖ Setup de entidade ap√≥s confirma√ß√£o
- ‚úÖ Dados salvos no localStorage temporariamente
- ‚úÖ Processo guiado para o usu√°rio

## üéØ Pr√≥ximos Passos

1. **Executar os scripts SQL no banco de dados:**
   \`\`\`sql
   -- Executar em ordem:
   -- 1. database/fix-profiles-structure.sql
   -- 2. database/fix-foreign-keys.sql
   \`\`\`

2. **Testar cria√ß√£o de usu√°rios:**
   - Usu√°rio individual
   - Usu√°rio de entidade
   - Processo de confirma√ß√£o de email

3. **Verificar integridade dos dados:**
   - Foreign keys funcionando
   - Triggers executando corretamente
   - Perfis sendo criados automaticamente

## üìä Benef√≠cios

- **Consist√™ncia**: Estrutura de banco padronizada
- **Confiabilidade**: Triggers robustos e testados
- **Simplicidade**: C√≥digo de registro mais limpo
- **Manutenibilidade**: F√°cil de entender e modificar

---

**Data**: ${new Date().toLocaleString('pt-BR')}
**Status**: ‚úÖ Corre√ß√µes aplicadas com sucesso
`
    
    try {
        fs.writeFileSync('CORRECOES_BANCO_USUARIOS_APLICADAS.md', docContent)
        console.log('‚úÖ Documenta√ß√£o criada: CORRECOES_BANCO_USUARIOS_APLICADAS.md')
        return true
    } catch (error) {
        console.error(`‚ùå Erro ao criar documenta√ß√£o: ${error.message}`)
        return false
    }
}

// 6. Executar todas as corre√ß√µes
function main() {
    console.log('\nüöÄ Iniciando corre√ß√µes...\n')
    
    let success = true
    
    // Verificar arquivos
    if (!checkSQLFiles()) {
        console.log('\n‚ùå Arquivos SQL n√£o encontrados. Execute o script de cria√ß√£o primeiro.')
        success = false
    }
    
    if (!checkRegistrationCode()) {
        console.log('\n‚ùå Arquivos de c√≥digo n√£o encontrados.')
        success = false
    }
    
    if (!success) {
        console.log('\n‚ùå FALHA: Arquivos necess√°rios n√£o encontrados.')
        process.exit(1)
    }
    
    // Aplicar corre√ß√µes
    if (!updateRegistrationFile()) {
        console.log('\n‚ùå FALHA: Erro ao atualizar arquivo de registro.')
        success = false
    }
    
    if (!updateConfirmEmailPage()) {
        console.log('\n‚ùå FALHA: Erro ao atualizar p√°gina de confirma√ß√£o.')
        success = false
    }
    
    if (!createDocumentation()) {
        console.log('\n‚ùå FALHA: Erro ao criar documenta√ß√£o.')
        success = false
    }
    
    // Resultado final
    console.log('\n' + '='.repeat(60))
    if (success) {
        console.log('‚úÖ SUCESSO: Todas as corre√ß√µes foram aplicadas!')
        console.log('\nüìã PR√ìXIMOS PASSOS:')
        console.log('1. Execute os scripts SQL no banco de dados')
        console.log('2. Teste a cria√ß√£o de usu√°rios')
        console.log('3. Verifique a integridade dos dados')
        console.log('\nüìÅ ARQUIVOS CRIADOS/ATUALIZADOS:')
        console.log('- app/register/page.tsx (atualizado)')
        console.log('- app/register/page-original.tsx (backup)')
        console.log('- app/confirm-email/page.tsx (atualizado)')
        console.log('- CORRECOES_BANCO_USUARIOS_APLICADAS.md (documenta√ß√£o)')
    } else {
        console.log('‚ùå FALHA: Algumas corre√ß√µes falharam.')
        console.log('Verifique os erros acima e tente novamente.')
        process.exit(1)
    }
}

// Executar script
main()