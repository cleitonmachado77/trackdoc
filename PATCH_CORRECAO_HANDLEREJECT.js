// ========================================
// PATCH PARA CORRIGIR FUN√á√ÉO handleReject
// ========================================
// Cole este c√≥digo no lugar da fun√ß√£o handleReject atual
// no arquivo: app/components/process-details-modal.tsx

// VERS√ÉO CORRIGIDA DO handleReject
const handleReject = async () => {
  console.log('=== IN√çCIO handleReject ===')
  console.log('isProcessingAction:', isProcessingAction)
  console.log('currentExecution:', currentExecution)
  console.log('actionComments:', actionComments)
  
  // Prevenir cliques duplos
  if (!preventDoubleClick() || isProcessingAction) {
    console.log('üö´ A√ß√£o bloqueada - duplo clique ou j√° processando')
    return
  }

  if (!currentExecution) {
    toast({
      title: "Erro",
      description: "Nenhuma execu√ß√£o pendente encontrada",
      variant: "destructive",
    })
    return
  }

  // ‚úÖ VALIDA√á√ÉO DE COMENT√ÅRIOS - Com destaque visual melhorado
  if (requiresComments('reject') && !actionComments.trim()) {
    console.log('‚ùå Coment√°rios obrigat√≥rios n√£o preenchidos')
    
    toast({
      title: "Coment√°rios obrigat√≥rios", 
      description: "√â necess√°rio adicionar coment√°rios ao reprovar o processo",
      variant: "destructive",
      duration: 5000, // Mais tempo para ler
    })
    
    // Focar no campo de coment√°rios para chamar aten√ß√£o
    const commentsField = document.getElementById('action-comments')
    if (commentsField) {
      commentsField.focus()
      commentsField.scrollIntoView({ behavior: 'smooth' })
      // Adicionar classe visual tempor√°ria de erro
      commentsField.classList.add('border-red-500', 'ring-2', 'ring-red-200')
      
      // Remover classe ap√≥s alguns segundos
      setTimeout(() => {
        commentsField.classList.remove('border-red-500', 'ring-2', 'ring-red-200')
      }, 3000)
    }
    
    return
  }

  setIsProcessingAction(true)
  
  try {
    console.log('üì§ Chamando advanceStep para rejei√ß√£o...')
    console.log('Par√¢metros:', {
      processId: currentExecution.process_id,
      executionId: currentExecution.id,
      action: 'reject',
      comments: actionComments
    })
    
    const result = await advanceStep(
      currentExecution.process_id,
      currentExecution.id,
      'reject', // a√ß√£o de rejei√ß√£o
      actionComments
    )

    console.log('‚úÖ Resultado da rejei√ß√£o:', result)

    // ‚úÖ FEEDBACK DE SUCESSO - Melhorado
    if (result?.executionId) {
      // Processo retornou ao usu√°rio anterior
      toast({
        title: "‚úÖ Processo reprovado com sucesso",
        description: "O processo foi reprovado e retornado ao usu√°rio anterior com seus coment√°rios.",
        duration: 4000, // Mais tempo para ler
        className: "border-orange-200 bg-orange-50",
      })
      
      console.log('üîÑ Processo retornado ao usu√°rio anterior')
    } else {
      // Processo foi cancelado (n√£o havia etapa anterior)
      toast({
        title: "‚ö†Ô∏è Processo cancelado",
        description: "O processo foi reprovado e cancelado (n√£o havia etapa anterior).",
        className: "border-red-200 bg-red-50",
      })
      
      console.log('üö´ Processo cancelado - sem etapa anterior')
    }

    // ‚úÖ LIMPAR INTERFACE
    console.log('üßπ Limpando coment√°rios...')
    setActionComments("")
    
    // ‚úÖ RECARREGAR DADOS - Como handleRequestApproval
    console.log('üîÑ Recarregando dados do processo...')
    await reloadProcessData()
    
    // ‚úÖ COMPORTAMENTO SIMILAR AO handleRequestApproval
    // Aguardar processamento e deixar modal aberto para feedback
    console.log('‚è≥ Aguardando processamento da atualiza√ß√£o...')
    await new Promise(resolve => setTimeout(resolve, 1500))
    console.log('‚úÖ Processo reprovado - Modal permanece aberto para revis√£o')
    
    // Modal permanece aberto para que usu√°rio veja o resultado
    
  } catch (error) {
    console.error('‚ùå Erro ao reprovar processo:', error)
    
    // Melhor tratamento de erro
    let errorMessage = "N√£o foi poss√≠vel reprovar o processo. Tente novamente."
    
    if (error instanceof Error) {
      if (error.message.includes('anterior')) {
        errorMessage = "N√£o foi poss√≠vel reprovar: n√£o h√° etapa anterior dispon√≠vel."
      } else if (error.message.includes('permission')) {
        errorMessage = "Voc√™ n√£o tem permiss√£o para reprovar este processo."
      }
    }
    
    toast({
      title: "Erro ao reprovar",
      description: errorMessage,
      variant: "destructive",
      duration: 5000,
    })
  } finally {
    console.log('üèÅ Finalizando processamento da reprova√ß√£o')
    setIsProcessingAction(false)
    console.log('=== FIM handleReject ===')
  }
}

// ========================================
// PATCH PARA MELHORAR CAMPO DE COMENT√ÅRIOS
// ========================================
// Substitua a div do campo de coment√°rios por esta vers√£o melhorada:

/*
<div>
  <Label htmlFor="action-comments" className="flex items-center gap-2">
    Coment√°rios 
    {requiresComments('reject') && (
      <Badge variant="destructive" className="text-xs px-2 py-1">
        ‚ö†Ô∏è Obrigat√≥rio para reprova√ß√£o
      </Badge>
    )}
    {requiresComments('reject') || '(opcional)'}
  </Label>
  
  <Textarea
    id="action-comments"
    placeholder={
      requiresComments('reject') 
        ? "‚ö†Ô∏è Coment√°rios s√£o obrigat√≥rios para reprova√ß√£o. Explique o motivo da rejei√ß√£o..."
        : "Adicione coment√°rios sobre a a√ß√£o..."
    }
    value={actionComments}
    onChange={(e) => setActionComments(e.target.value)}
    rows={3}
    className={`mt-1 transition-colors ${
      requiresComments('reject') && !actionComments.trim() 
        ? 'border-red-300 focus:border-red-500 bg-red-50' 
        : ''
    }`}
  />
  
  {requiresComments('reject') && !actionComments.trim() && (
    <Alert className="mt-2 border-red-200 bg-red-50">
      <AlertTriangle className="h-4 w-4 text-red-600" />
      <AlertDescription className="text-red-700">
        ‚ö†Ô∏è Coment√°rios s√£o necess√°rios para reprovar o processo
      </AlertDescription>
    </Alert>
  )}
  
  {actionComments.trim() && requiresComments('reject') && (
    <p className="text-sm text-green-600 mt-1 flex items-center gap-1">
      <CheckCircle className="h-4 w-4" />
      Coment√°rios preenchidos ‚úì
    </p>
  )}
</div>
*/

