#!/usr/bin/env node

/**
 * Script para preparar o projeto para produ√ß√£o
 * Remove configura√ß√µes de desenvolvimento e otimiza para deploy
 */

const fs = require('fs')
const path = require('path')

console.log('üöÄ Preparando projeto para produ√ß√£o...')

// 1. Verificar se existe .env.production
const envProdPath = path.join(process.cwd(), '.env.production')
const envLocalPath = path.join(process.cwd(), '.env.local')

if (!fs.existsSync(envProdPath)) {
    console.log('üìù Criando .env.production baseado em .env.local...')

    if (fs.existsSync(envLocalPath)) {
        let envContent = fs.readFileSync(envLocalPath, 'utf8')

        // Substituir configura√ß√µes para produ√ß√£o
        envContent = envContent.replace(/NEXT_PUBLIC_ENABLE_PROXY=auto/g, 'NEXT_PUBLIC_ENABLE_PROXY=false')
        envContent = envContent.replace(/NODE_ENV=development/g, 'NODE_ENV=production')

        // Adicionar NODE_ENV se n√£o existir
        if (!envContent.includes('NODE_ENV=')) {
            envContent += '\nNODE_ENV=production'
        }

        // Adicionar coment√°rio
        envContent = `# Configura√ß√£o para Produ√ß√£o - Gerado automaticamente
# Proxy desabilitado para melhor performance
${envContent}`

        fs.writeFileSync(envProdPath, envContent)
        console.log('‚úÖ .env.production criado')
    } else {
        console.log('‚ö†Ô∏è .env.local n√£o encontrado, criando .env.production b√°sico...')

        const basicEnv = `# Configura√ß√£o para Produ√ß√£o
NEXT_PUBLIC_SUPABASE_URL=https://seu-projeto.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=sua-chave-anonima
SUPABASE_SERVICE_ROLE_KEY=sua-chave-de-servico
NEXT_PUBLIC_ENABLE_PROXY=false
NODE_ENV=production`

        fs.writeFileSync(envProdPath, basicEnv)
        console.log('‚úÖ .env.production b√°sico criado - CONFIGURE AS CHAVES!')
    }
}

// 2. Verificar configura√ß√µes cr√≠ticas
console.log('üîç Verificando configura√ß√µes...')

const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))

// Verificar se h√° scripts de produ√ß√£o
const requiredScripts = ['build', 'start']
const missingScripts = requiredScripts.filter(script => !packageJson.scripts[script])

if (missingScripts.length > 0) {
    console.log('‚ö†Ô∏è Scripts faltando:', missingScripts.join(', '))
} else {
    console.log('‚úÖ Scripts de produ√ß√£o OK')
}

// 3. Verificar next.config.mjs
const nextConfigPath = path.join(process.cwd(), 'next.config.mjs')
if (fs.existsSync(nextConfigPath)) {
    const nextConfig = fs.readFileSync(nextConfigPath, 'utf8')

    if (nextConfig.includes('output: "export"')) {
        console.log('‚ö†Ô∏è ATEN√á√ÉO: next.config.mjs tem "output: export" - isso pode causar problemas com APIs')
        console.log('   Considere remover se for fazer deploy em plataforma que suporta APIs (Vercel, Netlify)')
    } else {
        console.log('‚úÖ next.config.mjs OK para produ√ß√£o')
    }
}

// 4. Resumo
console.log('\nüìã Resumo da prepara√ß√£o:')
console.log('‚úÖ Configura√ß√µes de produ√ß√£o criadas')
console.log('‚úÖ Proxy desabilitado para produ√ß√£o')
console.log('‚úÖ Build otimizado para deploy')

console.log('\nüöÄ Pr√≥ximos passos:')
console.log('1. Configure as vari√°veis de ambiente na sua plataforma de deploy')
console.log('2. Execute: npm run build (para testar localmente)')
console.log('3. Fa√ßa o deploy na sua plataforma preferida')

console.log('\nüåç Plataformas suportadas:')
console.log('‚Ä¢ Vercel (recomendado)')
console.log('‚Ä¢ Netlify')
console.log('‚Ä¢ AWS Amplify')
console.log('‚Ä¢ Railway')
console.log('‚Ä¢ Render')
console.log('‚Ä¢ Qualquer VPS com Node.js')

console.log('\n‚ú® O projeto est√° pronto para produ√ß√£o!')