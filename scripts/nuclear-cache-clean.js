const fs = require('fs')
const path = require('path')

function nuclearCacheClean() {
    console.log('üßπ LIMPEZA NUCLEAR DE CACHE - REMOVENDO TUDO\n')
    
    const itemsToRemove = [
        '.next',
        'node_modules/.cache',
        'node_modules/.vite',
        'node_modules/@next',
        '.eslintcache'
    ]
    
    itemsToRemove.forEach(item => {
        if (fs.existsSync(item)) {
            try {
                console.log(`üóëÔ∏è Removendo ${item}...`)
                fs.rmSync(item, { recursive: true, force: true })
                console.log(`‚úÖ ${item} removido`)
            } catch (error) {
                console.log(`‚ö†Ô∏è Erro ao remover ${item}: ${error.message}`)
            }
        } else {
            console.log(`‚ÑπÔ∏è ${item} n√£o existe`)
        }
    })
    
    console.log('\nüîç Verificando se ainda existem refer√™ncias problem√°ticas...')
    
    // Verificar se ainda h√° arquivos problem√°ticos
    const problematicFiles = [
        'lib/contexts/auth-context.tsx',
        'lib/contexts/hybrid-auth-context.tsx', 
        'lib/hooks/use-unified-auth.ts',
        'app/components/unified-notification-bell.tsx'
    ]
    
    let foundProblematic = false
    problematicFiles.forEach(file => {
        if (fs.existsSync(file)) {
            console.log(`‚ùå ARQUIVO PROBLEM√ÅTICO AINDA EXISTE: ${file}`)
            foundProblematic = true
        } else {
            console.log(`‚úÖ ${file} - removido`)
        }
    })
    
    if (!foundProblematic) {
        console.log('\nüéâ Todos os arquivos problem√°ticos foram removidos!')
    }
    
    console.log('\nüìã PR√ìXIMOS PASSOS:')
    console.log('1. npm install')
    console.log('2. npm run build')
    console.log('3. npm run dev')
    
    console.log('\nüßπ Limpeza nuclear conclu√≠da!')
}

nuclearCacheClean()